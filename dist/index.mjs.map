{"version":3,"file":"index.mjs","sources":["../src/colors/AbstractColor.ts","../src/utils/ColorGeom.ts","../src/colors/CubeColor.ts","../src/colors/LineColor.ts","../src/colors/PyramidColor.ts","../src/colors/SideColor.ts","../src/colors/SlopeColor.ts","../src/dimensions/AbstractDimension.ts","../src/dimensions/BrickDimension.ts","../src/dimensions/CubeDimension.ts","../src/dimensions/LineXDimension.ts","../src/dimensions/LineYDimension.ts","../src/dimensions/LineZDimension.ts","../src/dimensions/PyramidDimension.ts","../src/dimensions/SideXDimension.ts","../src/dimensions/SideYDimension.ts","../src/dimensions/SlopeDimension.ts","../src/primitives/AbstractPrimitive.ts","../src/geom/Matrix.ts","../src/geom/Point.ts","../src/geom/Point3D.ts","../src/utils/CanvasManager.ts","../src/display/BitmapData.ts","../src/primitives/Brick.ts","../src/display/PixelObject.ts","../src/primitives/SideX.ts","../src/primitives/SideY.ts","../src/primitives/Cube.ts","../src/primitives/LineX.ts","../src/primitives/LineY.ts","../src/primitives/LineZ.ts","../src/primitives/Pyramid.ts","../src/primitives/SlopeEast.ts","../src/primitives/SlopeNorth.ts","../src/primitives/SlopeSouth.ts","../src/primitives/SlopeWest.ts","../src/display/PixelView.ts","../src/utils/CanvasTool.ts","../src/utils/ColorPattern.ts"],"sourcesContent":["export class AbstractColor {\n  /**\n   * The inner colors for elements of certain primitive\n   */\n  public inner: number | null;\n\n  /**\n   * The border colors for elements of certain primitive\n   */\n  public border: number | null;\n\n  /**\n   * The borderHighlight colors for elements of certain primitive\n   */\n  public borderHighlight: number | null;\n\n  /**\n   * The left side colors for elements of certain primitive\n   */\n  public left: number | null;\n\n  /**\n   * The right side colors for elements of certain primitive\n   */\n  public right: number | null;\n\n  /**\n   * The horizontal colors for elements of certain primitive\n   */\n  public horizontal: number | null;\n\n  /**\n   * The left slot side colors for elements of certain primitive\n   */\n  public leftSlope: number | null;\n\n  /**\n   * The right slot side colors for elements of certain primitive\n   */\n  public rightSlope: number | null;\n\n  constructor({\n    inner = null,\n    left = null,\n    right = null,\n    border = null,\n    borderHighlight = null,\n    horizontal = null,\n    leftSlope = null,\n    rightSlope = null,\n  }: {\n    inner?: number | null;\n    left?: number | null;\n    right?: number | null;\n    border?: number | null;\n    borderHighlight?: number | null;\n    horizontal?: number | null;\n    leftSlope?: number | null;\n    rightSlope?: number | null;\n  } = {}) {\n    this.inner = inner;\n    this.left = left;\n    this.right = right;\n    this.border = border;\n    this.borderHighlight = borderHighlight;\n    this.horizontal = horizontal;\n    this.leftSlope = leftSlope;\n    this.rightSlope = rightSlope;\n  }\n\n  public static toString(): string {\n    return \"[AbstractColor]\";\n  }\n}\n","ï»¿/* eslint-disable no-bitwise */\n\nexport abstract class ColorGeom {\n  public static get32(color: number): number {\n    return color < 0xff000000 ? color + 0xff000000 : color;\n  }\n\n  public static applyBrightness(\n    color: number,\n    brightness: number,\n    highlight?: boolean\n  ): number {\n    let r;\n    let g;\n    let b;\n    let y;\n\n    const a = (color >>> 24) & 0x000000ff;\n    r = (color >>> 16) & 0x000000ff;\n    g = (color >>> 8) & 0x000000ff;\n    b = color & 0x000000ff;\n\n    y = ((r * 313524) >> 20) + ((g * 615514) >> 20) + ((b * 119538) >> 20);\n    const u =\n      -((155189 * r) >> 20) - ((303038 * g) >> 20) + ((458227 * b) >> 20);\n    const v =\n      ((644874 * r) >> 20) - ((540016 * g) >> 20) - ((104857 * b) >> 20);\n\n    if (!highlight) {\n      y += brightness;\n    } else {\n      y = 60 + y ** 1.2;\n    }\n\n    r = y + ((1195376 * v) >> 20);\n    g = y - ((408944 * u) >> 20) - ((608174 * v) >> 20);\n    b = y + ((2128609 * u) >> 20);\n\n    r = Math.max(0, Math.min(r, 255));\n    g = Math.max(0, Math.min(g, 255));\n    b = Math.max(0, Math.min(b, 255));\n\n    return (a << 24) | (r << 16) | (g << 8) | b;\n  }\n}\n\nColorGeom.toString = () => \"[ColorGeom]\";\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class CubeColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(\n    border?: number,\n    borderHighlight?: number,\n    left?: number,\n    right?: number,\n    horizontal?: number\n  ) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\n    this.borderHighlight = ColorGeom.get32(\n      borderHighlight === undefined ? 0xffffff : borderHighlight\n    );\n    this.left = ColorGeom.get32(left === undefined ? 0xc9cfd0 : left);\n    this.right = ColorGeom.get32(right === undefined ? 0xe3e3e3 : right);\n    this.horizontal = ColorGeom.get32(\n      horizontal === undefined ? 0xeeeff0 : horizontal\n    );\n  }\n\n  public getByHorizontalColor(horizontal: number): CubeColor {\n    return new CubeColor(\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 4),\n      // Apply highlight\n      ColorGeom.applyBrightness(horizontal, 0, true),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 2),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain),\n      horizontal\n    );\n  }\n\n  public static override toString(): string {\n    return \"[CubeColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class LineColor extends AbstractColor {\n  constructor(border?: number, inner?: number) {\n    super({ border: border || null, inner: inner || null });\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\n  }\n\n  public static override toString(): string {\n    return \"[LineColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class PyramidColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(\n    border?: number,\n    borderHighlight?: number,\n    left?: number,\n    right?: number\n  ) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x949698 : border);\n    this.borderHighlight = ColorGeom.get32(\n      borderHighlight === undefined ? 0xffffff : borderHighlight\n    );\n    this.left = ColorGeom.get32(left === undefined ? 0xe6e8e9 : left);\n    this.right = ColorGeom.get32(right === undefined ? 0xeeeff0 : right);\n  }\n\n  public getByRightColor(right: number): PyramidColor {\n    return new PyramidColor(\n      ColorGeom.applyBrightness(right, this.brightnessGain * 4),\n      // Apply highlight\n      ColorGeom.applyBrightness(right, 0, true),\n      ColorGeom.applyBrightness(right, this.brightnessGain),\n      right\n    );\n  }\n\n  public static override toString(): string {\n    return \"[PyramidColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class SideColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(border?: number, inner?: number) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\n    this.inner = ColorGeom.get32(inner === undefined ? 0xeeeeee : inner);\n  }\n\n  public getByInnerColor(inner: number): SideColor {\n    return new SideColor(\n      ColorGeom.applyBrightness(inner, this.brightnessGain * 4),\n      inner\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SideColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class SlopeColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(\n    border?: number,\n    borderHighlight?: number,\n    left?: number,\n    right?: number,\n    leftSlope?: number,\n    rightSlope?: number\n  ) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x949698 : border);\n    this.borderHighlight = ColorGeom.get32(\n      borderHighlight === undefined ? 0xffffff : borderHighlight\n    );\n    this.left = ColorGeom.get32(left === undefined ? 0xc9cfd0 : left);\n    this.right = ColorGeom.get32(right === undefined ? 0xe6e8e9 : right);\n    this.leftSlope = ColorGeom.get32(\n      leftSlope === undefined ? 0xdbdbdb : leftSlope\n    );\n    this.rightSlope = ColorGeom.get32(\n      rightSlope === undefined ? 0xdbdbdb : rightSlope\n    );\n  }\n\n  /*\n   * Horizontal side doesn't actually exist in the Slope primitive.\n   * You can assign the same horizontal color as cube\n   * so that you will be able to arrange the slope with cube\n   */\n  public getByHorizontalColor(horizontal: number): SlopeColor {\n    return new SlopeColor(\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 4),\n      // Apply highlight\n      ColorGeom.applyBrightness(horizontal, 0, true),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 2),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 1.5),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 0.5)\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SlopeColor]\";\n  }\n}\n","export class AbstractDimension {\n  /**\n   * The x Axis dimensions in 22.6 degrees coordinate\n   */\n  public xAxis: number | null;\n\n  /**\n   * The y Axis dimensions in 22.6 degrees coordinate\n   */\n  public yAxis: number | null;\n\n  /**\n   * The z Axis dimensions in 22.6 degrees coordinate\n   */\n  public zAxis: number | null;\n\n  /**\n   * Pyramid tall mode\n   */\n  public tall: boolean;\n\n  constructor({\n    xAxis = null,\n    yAxis = null,\n    zAxis = null,\n    tall = false,\n  }: {\n    xAxis?: number | null;\n    yAxis?: number | null;\n    zAxis?: number | null;\n    tall?: boolean;\n  } = {}) {\n    this.xAxis = xAxis;\n    this.yAxis = yAxis;\n    this.zAxis = zAxis;\n    this.tall = tall;\n  }\n\n  public static toString(): string {\n    return \"[AbstractDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class BrickDimension extends AbstractDimension {\n  constructor(xAxis?: number, yAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.yAxis = yAxis || 30;\n\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\n      throw new Error(\"xAxis / yAxis must be an even number\");\n    }\n\n    // If xAxis or yAxis = 4 then floodFill can not be applied\n    if (this.xAxis <= 4 || this.yAxis <= 4) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[BrickDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class CubeDimension extends AbstractDimension {\n  constructor(xAxis?: number, yAxis?: number, zAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.yAxis = yAxis || 30;\n    this.zAxis = zAxis || 30;\n\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\n      throw new Error(\"xAxis / yAxis must be an even number\");\n    }\n\n    // If axis = 4 then floodFill can not be applied\n    if (this.xAxis <= 4 || this.yAxis <= 4 || this.zAxis <= 2) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[CubeDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class LineXDimension extends AbstractDimension {\n  constructor(xAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n\n    if (this.xAxis % 2 === 1) {\n      throw new Error(\"xAxis must be an even number\");\n    }\n\n    if (this.xAxis < 2) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineXDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class LineYDimension extends AbstractDimension {\n  constructor(yAxis?: number) {\n    super();\n    this.yAxis = yAxis || 30;\n\n    if (this.yAxis % 2 === 1) {\n      throw new Error(\"yAxis must be an even number\");\n    }\n\n    if (this.yAxis < 2) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineYDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class LineZDimension extends AbstractDimension {\n  constructor(zAxis?: number) {\n    super();\n    this.zAxis = zAxis || 30;\n\n    if (this.zAxis <= 0) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineZDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class PyramidDimension extends AbstractDimension {\n  constructor(axis?: number, tall?: boolean) {\n    super();\n    this.xAxis = axis || 30;\n    this.yAxis = axis || 30;\n    this.tall = tall || false;\n\n    if (this.xAxis % 2 === 1) {\n      throw new Error(\"Axis must be an even number\");\n    }\n\n    if (this.xAxis <= 4) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[PyramidDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class SideXDimension extends AbstractDimension {\n  constructor(xAxis?: number, zAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.zAxis = zAxis || 30;\n\n    if (this.xAxis % 2 === 1) {\n      throw new Error(\"xAxis must be an even number\");\n    }\n\n    // If xAxis or zAxis = 4 floodFill cannot be applied\n    if (this.xAxis <= 4 || this.zAxis <= 2) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SideXDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class SideYDimension extends AbstractDimension {\n  constructor(yAxis?: number, zAxis?: number) {\n    super();\n    this.yAxis = yAxis || 30;\n    this.zAxis = zAxis || 30;\n\n    if (this.yAxis % 2 === 1) {\n      throw new Error(\"yAxis must be an even number\");\n    }\n\n    // If yAxis or zAxis = 4 floodFill cannot be applied\n    if (this.yAxis <= 4 || this.zAxis <= 2) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SideYDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class SlopeDimension extends AbstractDimension {\n  constructor(xAxis?: number, yAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.yAxis = yAxis || 30;\n\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\n      throw new Error(\"xAxis and yAxis must be even numbers\");\n    }\n\n    if (this.xAxis <= 4 || this.yAxis <= 4) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SlopeDimension]\";\n  }\n}\n","import type { Dimension } from \"../dimensions\";\nimport type { Color } from \"../colors\";\nimport type { BitmapData } from \"../display/BitmapData\";\nimport type { Matrix } from \"../geom\";\n\nexport class AbstractPrimitive {\n  /**\n   * The canvas for drawImage\n   */\n  public canvas: HTMLCanvasElement | null;\n\n  /**\n   * The width of the bitmap in 2d flash coordinate\n   */\n  protected w: number | null;\n\n  /**\n   * The height of the bitmap in 2d flash coordinate\n   */\n  protected h: number | null;\n\n  /**\n   * The dimension of primitive in 3d pixel coordinate\n   */\n  protected dimension: Dimension | null;\n\n  /**\n   * The color obj of the primitive\n   */\n  protected color: Color | null;\n\n  /**\n   * The border option of the primitive\n   */\n  protected border: boolean | null;\n\n  /**\n   * The source bitmapData containing pixel graphic\n   */\n  protected bitmapData: BitmapData | null;\n\n  /**\n   * The preserve canvas option\n   */\n  protected useDefaultCanvas: boolean | null;\n\n  /**\n   * The matrix offset between the bitmap and the 3d pixel coordinate zero point\n   */\n  protected matrix: Matrix | null;\n\n  constructor({\n    canvas = null,\n    w = null,\n    h = null,\n    dimension = null,\n    color = null,\n    border = null,\n    bitmapData = null,\n    useDefaultCanvas = null,\n    matrix = null,\n  }: {\n    canvas?: HTMLCanvasElement | null;\n    w?: number | null;\n    h?: number | null;\n    dimension?: Dimension | null;\n    color?: Color | null;\n    border?: boolean | null;\n    bitmapData?: BitmapData | null;\n    useDefaultCanvas?: boolean | null;\n    matrix?: Matrix | null;\n  } = {}) {\n    this.canvas = canvas;\n    this.w = w;\n    this.h = h;\n    this.dimension = dimension;\n    this.color = color;\n    this.border = border;\n    this.bitmapData = bitmapData;\n    this.useDefaultCanvas = useDefaultCanvas;\n    this.matrix = matrix;\n  }\n\n  public static toString(): string {\n    return \"[AbstractPrimitive]\";\n  }\n}\n","export class Matrix {\n  /**\n   * Position (0, 0) in a 3x3 matrix.\n   * */\n  public a: number;\n\n  /**\n   * Position (0, 1) in a 3x3 matrix.\n   * */\n  public b: number;\n\n  /**\n   * Position (1, 0) in a 3x3 matrix.\n   * */\n  public c: number;\n\n  /**\n   * Position (1, 1) in a 3x3 matrix.\n   * */\n  public d: number;\n\n  /**\n   * Position (2, 0) in a 3x3 matrix.\n   * */\n  public tx: number;\n\n  /**\n   * Position (2, 1) in a 3x3 matrix.\n   * */\n  public ty: number;\n\n  constructor(\n    a?: number,\n    b?: number,\n    c?: number,\n    d?: number,\n    tx?: number,\n    ty?: number\n  ) {\n    this.a = a === undefined ? 1 : a;\n    this.b = b || 0;\n    this.c = c || 0;\n    this.d = d === undefined ? 1 : d;\n    this.tx = tx || 0;\n    this.ty = ty || 0;\n  }\n\n  public static toString(): string {\n    return \"[Matrix]\";\n  }\n}\n","export class Point {\n  public x: number;\n\n  public y: number;\n\n  constructor(x?: number, y?: number) {\n    this.x = x === undefined ? 0 : x;\n    this.y = y === undefined ? 0 : y;\n  }\n\n  public toString(): string {\n    return `[Point x: ${this.x}, y: ${this.y}]`;\n  }\n}\n","import { Point } from \"./Point\";\n\nexport class Point3D {\n  public x: number;\n\n  public y: number;\n\n  public z: number;\n\n  constructor(x?: number, y?: number, z?: number) {\n    this.x = x === undefined ? 0 : x;\n    this.y = y === undefined ? 0 : y;\n    this.z = z === undefined ? 0 : z;\n  }\n\n  public toGlobalCoordinates(offset?: { x: number; y: number }): Point {\n    const p2D = new Point(\n      this.x - this.y,\n      Math.floor(this.x / 2 + this.y / 2) - this.z\n    );\n\n    if (offset !== undefined) {\n      p2D.x += offset.x;\n      p2D.y += offset.y;\n    }\n\n    return p2D;\n  }\n\n  public toString(): string {\n    return `[Point3D x : ${this.x}, y : ${this.y}, z: ${this.z}]`;\n  }\n}\n","export abstract class CanvasManager {\n  public static defaultCanvas: HTMLCanvasElement | null;\n\n  public static getDefaultCanvas(): HTMLCanvasElement | null {\n    this.defaultCanvas = this.defaultCanvas || document.createElement(\"canvas\");\n    return this.defaultCanvas;\n  }\n\n  public static getNewCanvas(): HTMLCanvasElement {\n    return document.createElement(\"canvas\");\n  }\n\n  public static toString(): string {\n    return \"[CanvasManager]\";\n  }\n}\n","/* eslint-disable no-bitwise */\n\nimport { CanvasManager } from \"../utils/CanvasManager\";\n\nexport class BitmapData {\n  public imageData: ImageData | null;\n\n  public canvas: HTMLCanvasElement | null;\n\n  public context: CanvasRenderingContext2D | null;\n\n  constructor(w?: number, h?: number, useDefaultCanvas?: boolean) {\n    if (w === undefined || h === undefined) {\n      throw new Error(\"BitmapData width or height is missing\");\n    }\n\n    if (useDefaultCanvas) {\n      this.canvas = CanvasManager.getDefaultCanvas();\n    } else {\n      this.canvas = CanvasManager.getNewCanvas();\n    }\n\n    this.imageData = null;\n    this.context = null;\n\n    if (this.canvas) {\n      this.canvas.setAttribute(\"width\", w.toString());\n      this.canvas.setAttribute(\"height\", h.toString());\n\n      this.context = this.canvas.getContext(\"2d\") || null;\n\n      if (this.context) {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        (this.context as any).mozImageSmoothingEnabled = false;\n        (this.context as any).msImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n\n        this.imageData = this.context.createImageData(w, h);\n      }\n    }\n  }\n\n  public setPixel(posX: number, posY: number, color: number): void {\n    if (this.imageData) {\n      const index = (posY * this.imageData.width + posX) * 4;\n      this.setPixelByIndex(index, color);\n    }\n  }\n\n  public setPixelByIndex(index: number, color: number): void {\n    if (this.imageData) {\n      const pixels = this.imageData.data;\n\n      pixels[index] = (color >>> 16) & 0xff;\n      pixels[index + 1] = (color >>> 8) & 0xff;\n      pixels[index + 2] = (color >>> 0) & 0xff;\n      pixels[index + 3] = (color >>> 24) & 0xff;\n    }\n  }\n\n  public checkPixelAvailable(x: number, y: number): boolean {\n    if (this.imageData) {\n      const index = (y * this.imageData.width + x) * 4;\n      return this.imageData.data[index + 3] === 0;\n    }\n\n    return false;\n  }\n\n  public floodFill(posX: number, posY: number, color: number): void {\n    if (((color >>> 24) & 0xff) === 0x00 || !this.imageData) {\n      // Transparent flood fill\n      return;\n    }\n\n    let x = posX;\n    let y = posY;\n\n    const stack: number[] = [];\n    let nowCol: number[] = [];\n    let prevCol: number[] = [];\n\n    let col: number;\n    let row: number;\n    let matchFlag: boolean;\n    let newStart: number;\n\n    const w = this.imageData.width;\n    const h = this.imageData.height;\n\n    let i: number;\n    let j: number;\n\n    // Bound reach\n    if (x < 0 || y < 0 || x >= w || y >= h) {\n      return;\n    }\n\n    // First point check fail\n    if (!this.checkPixelAvailable(x, y)) {\n      throw new Error(\"Start point for flood fill is already filled\");\n    }\n\n    // Left side flood fill\n    for (col = x; col >= 0; col -= 1) {\n      // Top side\n      for (row = y; row >= 0; row -= 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel and not at col top\n          if (row === y && this.checkPixelAvailable(col + 1, row - 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row - 1)) {\n              newStart = row - 1;\n            } else if (this.checkPixelAvailable(col + 1, row - 2)) {\n              newStart = row - 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = -1;\n            }\n\n            for (row = newStart; row >= 0; row -= 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // Available pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Bottom side\n      for (row = y; row < h; row += 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel and not at col bottom\n          if (row === y && this.checkPixelAvailable(col + 1, row + 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row + 1)) {\n              newStart = row + 1;\n            } else if (this.checkPixelAvailable(col + 1, row + 2)) {\n              newStart = row + 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = h;\n            }\n\n            for (row = newStart; row < h; row += 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // AAvailable pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Compare with previous column\n      // for first column,\n      // the given point should be inside the container\n      if (col === x) {\n        prevCol = nowCol.concat();\n      }\n\n      matchFlag = false;\n\n      for (i = 0; i < prevCol.length; i += 1) {\n        for (j = 0; j < prevCol.length; j += 1) {\n          if (nowCol[j] === prevCol[i]) {\n            matchFlag = true;\n            y = prevCol[i]!;\n            break;\n          }\n        }\n\n        if (matchFlag) {\n          break;\n        }\n      }\n\n      if (matchFlag) {\n        prevCol = nowCol.concat();\n        nowCol = [];\n      } else {\n        // Bound reach\n        break;\n      }\n    }\n\n    // Reset start point\n    x = posX;\n    y = posY;\n    prevCol = [];\n    nowCol = [];\n\n    // Right side flood fill\n    for (col = x; col < w; col += 1) {\n      // Top side\n      for (row = y; row >= 0; row -= 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel and not at col top\n          if (row === y && this.checkPixelAvailable(col - 1, row - 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row - 1)) {\n              newStart = row - 1;\n            } else if (this.checkPixelAvailable(col - 1, row - 2)) {\n              newStart = row - 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = -1;\n            }\n\n            for (row = newStart; row >= 0; row -= 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // Available pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Bottom side\n      for (row = y; row < h; row += 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel && not at col bottom\n          if (row === y && this.checkPixelAvailable(col - 1, row + 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row + 1)) {\n              newStart = row + 1;\n            } else if (this.checkPixelAvailable(col - 1, row + 2)) {\n              newStart = row + 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = h;\n            }\n\n            for (row = newStart; row < h; row += 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // Available pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Compare with previous column\n      // for first column,\n      // the given point should be inside the container\n      if (col === x) {\n        prevCol = nowCol.concat();\n      }\n\n      matchFlag = false;\n\n      for (i = 0; i < prevCol.length; i += 1) {\n        for (j = 0; j < prevCol.length; j += 1) {\n          if (nowCol[j] === prevCol[i]) {\n            matchFlag = true;\n            y = prevCol[i]!;\n            break;\n          }\n        }\n\n        if (matchFlag) {\n          break;\n        }\n      }\n\n      if (matchFlag) {\n        prevCol = nowCol.concat();\n        nowCol = [];\n      } else {\n        // Bound reach\n        break;\n      }\n    }\n\n    // Fill image data\n    for (i = 0; i < stack.length; i += 1) {\n      this.setPixelByIndex(stack[i]!, color);\n    }\n  }\n\n  public static toString(): string {\n    return \"[BitmapData]\";\n  }\n}\n","import { BrickDimension } from \"../dimensions\";\nimport { SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class Brick extends AbstractPrimitive {\n  constructor(\n    dimension?: BrickDimension,\n    color?: SideColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new BrickDimension() : dimension;\n    this.color = color === undefined ? new SideColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 1;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate ZERO point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = 0;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetInner = this.dimension!.yAxis! - 2;\n    const yOffsetInner = 0;\n    const xOffsetOut = this.dimension!.xAxis! - 1;\n    const yOffsetOut = (this.h || 0) - 1;\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + i,\n        yOffsetInner + Math.floor(i / 2),\n        borderColor\n      );\n\n      this.bitmapData!.setPixel(\n        xOffsetOut - i,\n        yOffsetOut - Math.floor(i / 2),\n        borderColor\n      );\n    }\n\n    // Y axis\n    for (let j = 0; j < this.dimension!.yAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + 1 - j,\n        yOffsetInner + Math.floor(j / 2),\n        borderColor\n      );\n\n      this.bitmapData!.setPixel(\n        xOffsetOut - 1 + j,\n        yOffsetOut - Math.floor(j / 2),\n        borderColor\n      );\n    }\n\n    // Fill a pixel graphic enclosed\n    this.bitmapData!.floodFill(\n      Math.floor(this.w! / 2),\n      Math.floor(this.h! / 2),\n      this.color!.inner!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[Brick]\";\n  }\n}\n","import { Point3D } from \"../geom\";\nimport type { AbstractPrimitive } from \"../primitives\";\n\nexport class PixelObject {\n  public x: number | null;\n\n  public y: number | null;\n\n  public canvas: HTMLCanvasElement | null;\n\n  constructor(primitive?: AbstractPrimitive, point3D?: Point3D) {\n    if (!primitive) {\n      throw new Error(\"Primitive is not defined\");\n    }\n\n    const p3D = point3D || new Point3D();\n\n    this.canvas = primitive.canvas;\n    this.x = (primitive as any).matrix!.tx + p3D.x - p3D.y;\n    this.y =\n      (primitive as any).matrix!.ty + Math.floor(p3D.x / 2 + p3D.y / 2) - p3D.z;\n  }\n\n  public static toString(): string {\n    return \"[PixelObject]\";\n  }\n}\n","import { SideXDimension } from \"../dimensions\";\nimport { SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SideX extends AbstractPrimitive {\n  constructor(\n    dimension?: SideXDimension,\n    color?: SideColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SideXDimension() : dimension;\n    this.color = color === undefined ? new SideColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis;\n    this.h = this.dimension!.zAxis! + this.dimension!.xAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = 0;\n    this.matrix.ty = -this.dimension!.zAxis!;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetInner = 0;\n    const yOffsetInner = this.dimension!.zAxis!;\n    const xOffsetOut = this.dimension!.xAxis! - 1;\n    const yOffsetOut = this.h! - this.dimension!.zAxis! - 1;\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + i,\n        yOffsetInner + Math.floor(i / 2),\n        borderColor\n      );\n      this.bitmapData!.setPixel(\n        xOffsetOut - i,\n        yOffsetOut - Math.floor(i / 2),\n        borderColor\n      );\n    }\n\n    // Z axis\n    for (let j = 0; j < this.dimension!.zAxis!; j += 1) {\n      this.bitmapData!.setPixel(xOffsetInner, yOffsetInner - j, borderColor);\n      this.bitmapData!.setPixel(xOffsetOut, yOffsetOut + j, borderColor);\n    }\n\n    // fill an pixel graphic enclosed\n    this.bitmapData!.floodFill(\n      Math.floor(this.w! / 2),\n      Math.floor(this.h! / 2),\n      this.color!.inner!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SideX]\";\n  }\n}\n","import { SideYDimension } from \"../dimensions\";\nimport { SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SideY extends AbstractPrimitive {\n  constructor(\n    dimension?: SideYDimension,\n    color?: SideColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SideYDimension() : dimension;\n    this.color = color === undefined ? new SideColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.yAxis!;\n    this.h = this.dimension!.zAxis! + this.dimension!.yAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = -this.dimension!.zAxis!;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetInner = 0;\n    const yOffsetInner = this.h! - this.dimension!.zAxis! - 1;\n    const xOffsetOut = this.dimension!.yAxis! - 1;\n    const yOffsetOut = this.dimension!.zAxis!;\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + i,\n        yOffsetInner - Math.floor(i / 2),\n        borderColor\n      );\n\n      this.bitmapData!.setPixel(\n        xOffsetOut - i,\n        yOffsetOut + Math.floor(i / 2),\n        borderColor\n      );\n    }\n\n    // Z axis\n    for (let j = 0; j < this.dimension!.zAxis!; j += 1) {\n      this.bitmapData!.setPixel(xOffsetInner, yOffsetInner + j, borderColor);\n      this.bitmapData!.setPixel(xOffsetOut, yOffsetOut - j, borderColor);\n    }\n\n    // Fill a pixel graphic enclosed\n    this.bitmapData!.floodFill(\n      Math.floor(this.w! / 2),\n      Math.floor(this.h! / 2),\n      this.color!.inner!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SideY]\";\n  }\n}\n","import {\n  CubeDimension,\n  BrickDimension,\n  SideYDimension,\n  SideXDimension,\n} from \"../dimensions\";\nimport { CubeColor, SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { PixelObject } from \"../display/PixelObject\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\nimport { Brick } from \"./Brick\";\nimport { SideX } from \"./SideX\";\nimport { SideY } from \"./SideY\";\n\nexport class Cube extends AbstractPrimitive {\n  constructor(\n    dimension?: CubeDimension,\n    color?: CubeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new CubeDimension() : dimension;\n    this.color = color === undefined ? new CubeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h =\n      this.dimension!.zAxis! +\n      (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 1;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = -this.dimension!.zAxis!;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    let offsetX: number;\n    let offsetY: number;\n\n    // Horizontal layer\n    const brick = new Brick(\n      new BrickDimension(this.dimension!.xAxis!, this.dimension!.yAxis!),\n      new SideColor(this.color!.border!, this.color!.horizontal!),\n      this.border!\n    );\n\n    // Left side\n    const sideX = new SideX(\n      new SideXDimension(this.dimension!.xAxis!, this.dimension!.zAxis!),\n      new SideColor(this.color!.border!, this.color!.left!),\n      this.border!\n    );\n\n    // Right side\n    const sideY = new SideY(\n      new SideYDimension(this.dimension!.yAxis!, this.dimension!.zAxis!),\n      new SideColor(this.color!.border!, this.color!.right!),\n      this.border!\n    );\n\n    const poBrick = new PixelObject(brick);\n    const poX = new PixelObject(sideX);\n    const poY = new PixelObject(sideY);\n\n    const ctx = this.bitmapData!.context!;\n\n    ctx.drawImage(\n      poBrick.canvas!,\n      poBrick.x! + this.dimension!.yAxis! - 2,\n      poBrick.y!\n    );\n\n    ctx.drawImage(\n      poX.canvas!,\n      poX.x!,\n      poX.y! + this.dimension!.zAxis! + this.dimension!.yAxis! / 2 - 1\n    );\n\n    ctx.drawImage(\n      poY.canvas!,\n      poY.x! + this.w! - 2,\n      poX.y! + this.dimension!.zAxis! + this.dimension!.xAxis! / 2 - 1\n    );\n\n    // Highlight & highlight fix\n    const bmd = new BitmapData(this.w!, this.h!);\n\n    if (this.border) {\n      offsetX = this.dimension!.xAxis! - 2;\n      offsetY = (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2 - 2;\n\n      // The 2px in bounding without highlight\n      for (let i = 0; i < this.dimension!.xAxis! - 2; i += 1) {\n        bmd.setPixel(\n          offsetX + 1 - i,\n          offsetY - Math.floor(i / 2),\n          this.color!.borderHighlight!\n        );\n      }\n\n      // the 2px in bounding without highlight\n      for (let j = 0; j < this.dimension!.yAxis! - 2; j += 1) {\n        bmd.setPixel(\n          offsetX + j,\n          offsetY - Math.floor(j / 2),\n          this.color!.borderHighlight!\n        );\n      }\n\n      for (let k = 0; k < this.dimension!.zAxis!; k += 1) {\n        bmd.setPixel(offsetX, offsetY + k, this.color!.borderHighlight!);\n      }\n    } else {\n      for (let i = 0; i < this.dimension!.zAxis!; i += 1) {\n        bmd.setPixel(\n          this.dimension!.xAxis! - 2,\n          (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2 - 1 + i,\n          this.color!.left!\n        );\n      }\n    }\n\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\n    ctx.drawImage(bmd.canvas!, 0, 0);\n  }\n\n  public static override toString(): string {\n    return \"[Cube]\";\n  }\n}\n","import { LineXDimension } from \"../dimensions\";\nimport { LineColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class LineX extends AbstractPrimitive {\n  constructor(\n    dimension?: LineXDimension,\n    color?: LineColor,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.dimension = dimension === undefined ? new LineXDimension() : dimension;\n    this.color = color === undefined ? new LineColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis!;\n    this.h = this.dimension!.xAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = 0;\n    this.matrix.ty = 0;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetBorder = 0;\n    const yOffsetBorder = 0;\n    const borderColor = this.color!.border!;\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetBorder + i,\n        yOffsetBorder + Math.floor(i / 2),\n        borderColor\n      );\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineX]\";\n  }\n}\n","import { LineYDimension } from \"../dimensions\";\nimport { LineColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class LineY extends AbstractPrimitive {\n  constructor(\n    dimension?: LineYDimension,\n    color?: LineColor,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.dimension = dimension === undefined ? new LineYDimension() : dimension;\n    this.color = color === undefined ? new LineColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.yAxis!;\n    this.h = this.dimension!.yAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = 0;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetBorder = this.dimension!.yAxis! - 1;\n    const yOffsetBorder = 0;\n    const borderColor = this.color!.border!;\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetBorder - i,\n        yOffsetBorder + Math.floor(i / 2),\n        borderColor\n      );\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineY]\";\n  }\n}\n","import { LineZDimension } from \"../dimensions\";\nimport { LineColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class LineZ extends AbstractPrimitive {\n  constructor(\n    dimension?: LineZDimension,\n    color?: LineColor,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.dimension = dimension === undefined ? new LineZDimension() : dimension;\n    this.color = color === undefined ? new LineColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = 1;\n    this.h = this.dimension!.zAxis!;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = 0;\n    this.matrix.ty = -this.dimension!.zAxis! + 1;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetBorder = 0;\n    const yOffsetBorder = 0;\n    const borderColor = this.color!.border!;\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.zAxis!; i += 1) {\n      this.bitmapData!.setPixel(xOffsetBorder, yOffsetBorder + i, borderColor);\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineZ]\";\n  }\n}\n","import { PyramidDimension } from \"../dimensions\";\nimport { PyramidColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class Pyramid extends AbstractPrimitive {\n  private readonly hSize: number;\n\n  private readonly hOffset: number;\n\n  constructor(\n    dimension?: PyramidDimension,\n    color?: PyramidColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension =\n      dimension === undefined ? new PyramidDimension() : dimension;\n    this.color = color === undefined ? new PyramidColor() : color;\n\n    this.hSize = this.dimension.tall\n      ? this.dimension!.xAxis! * 2\n      : this.dimension!.xAxis!;\n    this.hOffset = this.dimension.tall ? -3 : -2;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = this.hSize + this.dimension!.xAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h += this.hOffset;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.xAxis! + 2;\n    this.matrix.ty =\n      -this.hSize / 2 +\n      2 -\n      (this.dimension!.tall ? this.dimension!.xAxis! / 2 : 1);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n\n    const colorBorderHighlight = this.border\n      ? this.color!.borderHighlight!\n      : colorBorderLeft;\n\n    // Z axis highlight\n    for (let k = 0; k < this.hSize + this.dimension!.xAxis! / 2 - 4; k += 1) {\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2,\n        k + 3 + this.hOffset,\n        colorBorderHighlight\n      );\n    }\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        i,\n        this.hSize + Math.floor(i / 2) + this.hOffset,\n        colorBorderLeft\n      );\n    }\n\n    // Y axis\n    for (let j = 0; j < this.dimension!.xAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        j + this.dimension!.xAxis! - 2,\n        this.hSize +\n          this.dimension!.xAxis! / 2 -\n          Math.floor(j / 2) -\n          1 +\n          this.hOffset,\n        colorBorderRight\n      );\n    }\n\n    if (!this.dimension!.tall) {\n      // Left edge\n      for (let l = 0; l < this.hSize; l += 1) {\n        this.bitmapData!.setPixel(\n          l,\n          this.hSize - l + this.hOffset,\n          colorBorderLeft\n        );\n      }\n\n      // Right edge\n      for (let m = 0; m < this.hSize; m += 1) {\n        this.bitmapData!.setPixel(\n          m + this.hSize - 2,\n          m + 1 + this.hOffset,\n          colorBorderRight\n        );\n      }\n    } else {\n      // Left edge\n      for (let l = 0; l < this.hSize - 2; l += 1) {\n        this.bitmapData!.setPixel(\n          Math.floor(l / 2),\n          this.hSize - l + this.hOffset,\n          colorBorderLeft\n        );\n      }\n\n      // Right edge\n      for (let m = 2; m < this.hSize; m += 1) {\n        this.bitmapData!.setPixel(\n          Math.floor(m / 2) + this.dimension!.xAxis! - 2,\n          m + 1 + this.hOffset,\n          colorBorderRight\n        );\n      }\n    }\n\n    if (!this.border) {\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2,\n        this.hSize + this.dimension!.xAxis! / 2 - 1 + this.hOffset,\n        colorBorderLeft\n      );\n    }\n\n    // floodFill\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis! - 1,\n      this.hSize +\n        Math.floor((this.dimension!.xAxis! - 1) / 2) +\n        this.hOffset -\n        1,\n      this.color!.right!\n    );\n\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis! - 3,\n      this.hSize +\n        Math.floor((this.dimension!.xAxis! - 1) / 2) +\n        this.hOffset -\n        2,\n      this.color!.left!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[Pyramid]\";\n  }\n}\n","import { SlopeColor } from \"../colors\";\nimport { SlopeDimension } from \"../dimensions\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SlopeEast extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = this.dimension!.xAxis! * 2 + this.dimension!.yAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -((this.dimension!.xAxis! * 3) / 2 - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.rightSlope!;\n\n    // Y axis\n    for (let j = 0; j < this.dimension!.yAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        j,\n        this.dimension!.yAxis! / 2 - Math.floor(j / 2) - 1,\n        colorBorderRight\n      );\n\n      this.bitmapData!.setPixel(\n        j + this.dimension!.xAxis! - 2,\n        this.h! - Math.floor(j / 2) - 1,\n        colorBorderRight\n      );\n    }\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        i,\n        this.h! - this.dimension!.xAxis! / 2 + Math.floor(i / 2),\n        colorBorderLeft\n      );\n    }\n\n    // X axis\n    for (\n      let k = this.dimension!.yAxis! / 2 - 1;\n      k < this.h! - this.dimension!.xAxis! / 2;\n      k += 1\n    ) {\n      this.bitmapData!.setPixel(0, k, colorBorderLeft);\n    }\n\n    // Slot\n    for (let m = 0; m < this.dimension!.xAxis! * 2 - 2; m += 1) {\n      this.bitmapData!.setPixel(\n        this.dimension!.yAxis! - 1 + Math.floor(m / 2),\n        m,\n        colorBorderRight\n      );\n\n      this.bitmapData!.setPixel(\n        1 + Math.floor(m / 2),\n        this.dimension!.yAxis! / 2 + m - 1,\n        colorBorderRight\n      );\n    }\n\n    // floodFill\n    this.bitmapData!.floodFill(\n      this.dimension!.yAxis! - 2,\n      1,\n      this.color!.rightSlope!\n    );\n\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis! - 3,\n      this.h! - 3,\n      this.color!.left!\n    );\n\n    // Hack single pixel\n    this.bitmapData!.setPixel(\n      this.dimension!.xAxis! - 2,\n      this.h! - 2,\n      this.color!.left!\n    );\n\n    // Highlight\n    if (this.border) {\n      for (let n = 1; n < this.dimension!.xAxis! * 2 - 3; n += 1) {\n        this.bitmapData!.setPixel(\n          1 + Math.floor(n / 2),\n          this.dimension!.yAxis! / 2 + n - 1,\n          this.color!.borderHighlight!\n        );\n      }\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SlopeEast]\";\n  }\n}\n","import { SlopeDimension, SideXDimension } from \"../dimensions\";\nimport { SlopeColor, SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\nimport { SideX } from \"./SideX\";\n\nimport { PixelObject } from \"../display/PixelObject\";\n\nexport class SlopeNorth extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = (this.dimension!.yAxis! * 3) / 2 + this.dimension!.xAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -(this.dimension!.yAxis! - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n    const colorBorderHighlight = this.border\n      ? this.color!.borderHighlight\n      : this.color!.left;\n\n    const sideX = new SideX(\n      new SideXDimension(\n        this.dimension!.xAxis!,\n        this.h! - this.dimension!.xAxis! / 2\n      ),\n      new SideColor(colorBorderLeft, this.color!.left!)\n    );\n\n    const poX = new PixelObject(sideX);\n\n    const ctx = this.bitmapData!.context!;\n    ctx.drawImage(\n      poX.canvas!,\n      poX.x!,\n      poX.y! + this.h! - this.dimension!.xAxis! / 2\n    );\n\n    const bmd = new BitmapData(this.w!, this.h!);\n\n    // Close the path for floodFill\n    for (\n      let i = this.h! - (this.dimension!.yAxis! * 3) / 2 + 2;\n      i < this.h!;\n      i += 1\n    ) {\n      bmd.setPixel(this.dimension!.xAxis! - 1, i, colorBorderRight);\n    }\n\n    // Y axis\n    for (let j = 1; j < this.dimension!.yAxis!; j += 1) {\n      bmd.setPixel(\n        this.dimension!.xAxis! + j - 2,\n        this.h! - Math.floor(j / 2) - 1,\n        colorBorderRight\n      );\n\n      bmd.setPixel(\n        this.dimension!.xAxis! + j - 2,\n        this.dimension!.xAxis! / 2 - 2 + j,\n        colorBorderRight\n      );\n    }\n\n    // floodFill\n    bmd.floodFill(this.dimension!.xAxis! + 1, this.h! - 3, this.color!.right!);\n\n    // Highlight\n    for (let n = this.dimension!.xAxis! / 2; n < this.h! - 1; n += 1) {\n      bmd.setPixel(this.dimension!.xAxis! - 1, n, this.color!.right!);\n      bmd.setPixel(this.dimension!.xAxis! - 2, n, colorBorderHighlight!);\n    }\n\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\n    ctx.drawImage(bmd.canvas!, 0, 0);\n  }\n\n  public static override toString(): string {\n    return \"[SlopeNorth]\";\n  }\n}\n","import { SlopeDimension } from \"../dimensions\";\nimport { SlopeColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SlopeSouth extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = this.dimension!.xAxis! / 2 + this.dimension!.yAxis! * 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -((this.dimension!.yAxis! * 3) / 2 - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.leftSlope!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n\n    // X axis\n    for (let j = 0; j < this.dimension!.xAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        j,\n        this.dimension!.yAxis! * 2 + Math.floor(j / 2) - 3,\n        colorBorderLeft\n      );\n\n      this.bitmapData!.setPixel(\n        j + this.dimension!.yAxis! - 2,\n        Math.floor(j / 2),\n        colorBorderLeft\n      );\n    }\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2 + i,\n        this.h! - Math.floor(i / 2) - 1,\n        colorBorderRight\n      );\n    }\n\n    // X axis\n    for (\n      let k = this.dimension!.xAxis! / 2 - 1;\n      k < this.h! - this.dimension!.yAxis! / 2;\n      k += 1\n    ) {\n      this.bitmapData!.setPixel(this.w! - 1, k, colorBorderRight);\n    }\n\n    // Slot\n    for (let m = 0; m < this.dimension!.yAxis! * 2 - 2; m += 1) {\n      this.bitmapData!.setPixel(\n        Math.floor(m / 2),\n        this.dimension!.yAxis! * 2 - m - 3,\n        colorBorderLeft\n      );\n\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2 + Math.floor(m / 2),\n        this.h! - m - 1,\n        colorBorderLeft\n      );\n    }\n\n    // floodFill\n    this.bitmapData!.floodFill(\n      this.dimension!.yAxis! - 1,\n      1,\n      this.color!.leftSlope!\n    );\n\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis!,\n      this.h! - 3,\n      this.color!.right!\n    );\n\n    // Hack single pixel\n    this.bitmapData!.setPixel(\n      this.dimension!.xAxis! - 1,\n      this.h! - 2,\n      this.color!.right!\n    );\n\n    // Highlight\n    if (this.border) {\n      for (let n = 1; n < this.dimension!.yAxis! * 2 - 3; n += 1) {\n        this.bitmapData!.setPixel(\n          this.dimension!.xAxis! - 2 + Math.floor(n / 2),\n          this.h! - n - 1,\n          this.color!.borderHighlight!\n        );\n      }\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SlopeSouth]\";\n  }\n}\n","import { SlopeDimension, SideYDimension } from \"../dimensions\";\nimport { SlopeColor, SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\nimport { SideY } from \"./SideY\";\n\nimport { PixelObject } from \"../display/PixelObject\";\n\nexport class SlopeWest extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = (this.dimension!.xAxis! * 3) / 2 + this.dimension!.yAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -(this.dimension!.xAxis! - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n    const colorBorderHighlight = this.border\n      ? this.color!.borderHighlight!\n      : this.color!.left!;\n\n    const sideY = new SideY(\n      new SideYDimension(\n        this.dimension!.yAxis!,\n        this.h! - this.dimension!.yAxis! / 2\n      ),\n      new SideColor(colorBorderRight, this.color!.right!)\n    );\n\n    const poY = new PixelObject(sideY);\n\n    const ctx = this.bitmapData!.context!;\n    ctx.drawImage(\n      poY.canvas!,\n      poY.x! + this.w! - 2,\n      poY.y! + this.h! - this.dimension!.yAxis! / 2\n    );\n\n    const bmd = new BitmapData(this.w!, this.h!);\n\n    // Close the path for floodFill\n    for (\n      let i = this.h! - (this.dimension!.xAxis! * 3) / 2 + 2;\n      i < this.h!;\n      i += 1\n    ) {\n      bmd.setPixel(this.dimension!.xAxis! - 2, i, colorBorderLeft);\n    }\n\n    // X axis\n    for (let j = 0; j < this.dimension!.xAxis! - 1; j += 1) {\n      bmd.setPixel(\n        j,\n        this.dimension!.xAxis! +\n          this.dimension!.yAxis! / 2 -\n          3 +\n          Math.floor(j / 2),\n        colorBorderLeft\n      );\n\n      bmd.setPixel(\n        j,\n        this.dimension!.xAxis! + this.dimension!.yAxis! / 2 - 3 - j,\n        colorBorderLeft\n      );\n    }\n\n    // floodFill\n    bmd.floodFill(this.dimension!.xAxis! - 3, this.h! - 3, this.color!.left!);\n\n    // Highlight\n    for (let n = this.dimension!.yAxis! / 2; n < this.h! - 1; n += 1) {\n      bmd.setPixel(this.dimension!.xAxis! - 2, n, colorBorderHighlight);\n    }\n\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\n    ctx.drawImage(bmd.canvas!, 0, 0);\n  }\n\n  public static override toString(): string {\n    return \"[SlopeWest]\";\n  }\n}\n","import { Point } from \"../geom\";\nimport { PixelObject } from \"./PixelObject\";\n\nexport class PixelView {\n  public canvas: HTMLCanvasElement | null;\n\n  public context: CanvasRenderingContext2D | null;\n\n  public point: Point | null;\n\n  constructor(canvas?: HTMLCanvasElement, point?: Point) {\n    if (!canvas) {\n      throw new Error(\"Canvas is not defined\");\n    }\n\n    this.canvas = canvas;\n\n    this.context = this.canvas.getContext(\"2d\");\n    if (this.context) {\n      (this.context as any).mozImageSmoothingEnabled = false;\n      (this.context as any).msImageSmoothingEnabled = false;\n      this.context.imageSmoothingEnabled = false;\n    }\n\n    this.point = point || new Point(0, 0);\n  }\n\n  public renderObject(\n    primitive: ConstructorParameters<typeof PixelObject>[0],\n    point3D: ConstructorParameters<typeof PixelObject>[1]\n  ): void {\n    const po = new PixelObject(primitive, point3D);\n\n    if (this.context && this.point && po.canvas) {\n      this.context.drawImage(\n        po.canvas,\n        this.point.x + (po.x || 0),\n        this.point.y + (po.y || 0)\n      );\n    }\n  }\n\n  public clear(): void {\n    if (this.canvas && this.context) {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n  public static toString(): string {\n    return \"[PixelView]\";\n  }\n}\n","export abstract class CanvasTool {\n  public static getPixel(imageData: ImageData, x: number, y: number): number {\n    const { data } = imageData;\n    const index = (y * imageData.width + x) * 4;\n    const r = data[index]!;\n    const g = data[index + 1]!;\n    const b = data[index + 2]!;\n\n    // eslint-disable-next-line no-bitwise\n    return (r << 16) | (g << 8) | b;\n  }\n\n  public static toString() {\n    return \"[CanvasTool]\";\n  }\n}\n","export abstract class ColorPattern {\n  public GRASS_GREEN: number;\n\n  public YELLOW: number;\n\n  public WINE_RED: number;\n\n  public PINK: number;\n\n  public PURPLE: number;\n\n  public BLUE: number;\n\n  public GRAY: number;\n\n  public BLACK: number;\n\n  public FINE_COLORS: number[];\n\n  protected constructor() {\n    this.GRASS_GREEN = 0xccff00;\n    this.YELLOW = 0xffff00;\n    this.WINE_RED = 0xff0099;\n    this.PINK = 0xff7cbf;\n    this.PURPLE = 0xcc00ff;\n    this.BLUE = 0x00ccff;\n    this.GRAY = 0xeeeeee;\n    this.BLACK = 0x666666;\n\n    this.FINE_COLORS = [\n      this.GRASS_GREEN,\n      this.YELLOW,\n      this.WINE_RED,\n      this.PINK,\n      this.PURPLE,\n      this.BLUE,\n      this.GRAY,\n      this.BLACK,\n    ];\n  }\n\n  public getRandomComfortableColor(): number {\n    return this.FINE_COLORS[\n      Math.floor(Math.random() * this.FINE_COLORS.length)\n    ]!;\n  }\n\n  public static toString(): string {\n    return \"[ColorPattern]\";\n  }\n}\n"],"names":[],"mappings":"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"}