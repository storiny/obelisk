{"version":3,"file":"index.umd.js","sources":["../src/colors/AbstractColor.ts","../src/utils/ColorGeom.ts","../src/colors/CubeColor.ts","../src/colors/LineColor.ts","../src/colors/PyramidColor.ts","../src/colors/SideColor.ts","../src/colors/SlopeColor.ts","../src/dimensions/AbstractDimension.ts","../src/dimensions/BrickDimension.ts","../src/dimensions/CubeDimension.ts","../src/dimensions/LineXDimension.ts","../src/dimensions/LineYDimension.ts","../src/dimensions/LineZDimension.ts","../src/dimensions/PyramidDimension.ts","../src/dimensions/SideXDimension.ts","../src/dimensions/SideYDimension.ts","../src/dimensions/SlopeDimension.ts","../src/primitives/AbstractPrimitive.ts","../src/geom/Matrix.ts","../src/geom/Point.ts","../src/geom/Point3D.ts","../src/utils/CanvasManager.ts","../src/display/BitmapData.ts","../src/primitives/Brick.ts","../src/display/PixelObject.ts","../src/primitives/SideX.ts","../src/primitives/SideY.ts","../src/primitives/Cube.ts","../src/primitives/LineX.ts","../src/primitives/LineY.ts","../src/primitives/LineZ.ts","../src/primitives/Pyramid.ts","../src/primitives/SlopeEast.ts","../src/primitives/SlopeNorth.ts","../src/primitives/SlopeSouth.ts","../src/primitives/SlopeWest.ts","../src/display/PixelView.ts","../src/utils/CanvasTool.ts","../src/utils/ColorPattern.ts"],"sourcesContent":["export class AbstractColor {\r\n  /**\r\n   * The inner colors for elements of certain primitive\r\n   */\r\n  public inner: number | null;\r\n\r\n  /**\r\n   * The border colors for elements of certain primitive\r\n   */\r\n  public border: number | null;\r\n\r\n  /**\r\n   * The borderHighlight colors for elements of certain primitive\r\n   */\r\n  public borderHighlight: number | null;\r\n\r\n  /**\r\n   * The left side colors for elements of certain primitive\r\n   */\r\n  public left: number | null;\r\n\r\n  /**\r\n   * The right side colors for elements of certain primitive\r\n   */\r\n  public right: number | null;\r\n\r\n  /**\r\n   * The horizontal colors for elements of certain primitive\r\n   */\r\n  public horizontal: number | null;\r\n\r\n  /**\r\n   * The left slot side colors for elements of certain primitive\r\n   */\r\n  public leftSlope: number | null;\r\n\r\n  /**\r\n   * The right slot side colors for elements of certain primitive\r\n   */\r\n  public rightSlope: number | null;\r\n\r\n  constructor({\r\n    inner = null,\r\n    left = null,\r\n    right = null,\r\n    border = null,\r\n    borderHighlight = null,\r\n    horizontal = null,\r\n    leftSlope = null,\r\n    rightSlope = null,\r\n  }: {\r\n    inner?: number | null;\r\n    left?: number | null;\r\n    right?: number | null;\r\n    border?: number | null;\r\n    borderHighlight?: number | null;\r\n    horizontal?: number | null;\r\n    leftSlope?: number | null;\r\n    rightSlope?: number | null;\r\n  } = {}) {\r\n    this.inner = inner;\r\n    this.left = left;\r\n    this.right = right;\r\n    this.border = border;\r\n    this.borderHighlight = borderHighlight;\r\n    this.horizontal = horizontal;\r\n    this.leftSlope = leftSlope;\r\n    this.rightSlope = rightSlope;\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[AbstractColor]\";\r\n  }\r\n}\r\n","ï»¿/* eslint-disable no-bitwise */\r\n\r\nexport abstract class ColorGeom {\r\n  public static get32(color: number): number {\r\n    return color < 0xff000000 ? color + 0xff000000 : color;\r\n  }\r\n\r\n  public static applyBrightness(\r\n    color: number,\r\n    brightness: number,\r\n    highlight?: boolean\r\n  ): number {\r\n    let r;\r\n    let g;\r\n    let b;\r\n    let y;\r\n\r\n    const a = (color >>> 24) & 0x000000ff;\r\n    r = (color >>> 16) & 0x000000ff;\r\n    g = (color >>> 8) & 0x000000ff;\r\n    b = color & 0x000000ff;\r\n\r\n    y = ((r * 313524) >> 20) + ((g * 615514) >> 20) + ((b * 119538) >> 20);\r\n    const u =\r\n      -((155189 * r) >> 20) - ((303038 * g) >> 20) + ((458227 * b) >> 20);\r\n    const v =\r\n      ((644874 * r) >> 20) - ((540016 * g) >> 20) - ((104857 * b) >> 20);\r\n\r\n    if (!highlight) {\r\n      y += brightness;\r\n    } else {\r\n      y = 60 + y ** 1.2;\r\n    }\r\n\r\n    r = y + ((1195376 * v) >> 20);\r\n    g = y - ((408944 * u) >> 20) - ((608174 * v) >> 20);\r\n    b = y + ((2128609 * u) >> 20);\r\n\r\n    r = Math.max(0, Math.min(r, 255));\r\n    g = Math.max(0, Math.min(g, 255));\r\n    b = Math.max(0, Math.min(b, 255));\r\n\r\n    return (a << 24) | (r << 16) | (g << 8) | b;\r\n  }\r\n}\r\n\r\nColorGeom.toString = () => \"[ColorGeom]\";\r\n","import { AbstractColor } from \"./AbstractColor\";\r\nimport { ColorGeom } from \"../utils/ColorGeom\";\r\n\r\nexport class CubeColor extends AbstractColor {\r\n  public brightnessGain = -20;\r\n\r\n  constructor(\r\n    border?: number,\r\n    borderHighlight?: number,\r\n    left?: number,\r\n    right?: number,\r\n    horizontal?: number\r\n  ) {\r\n    super();\r\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\r\n    this.borderHighlight = ColorGeom.get32(\r\n      borderHighlight === undefined ? 0xffffff : borderHighlight\r\n    );\r\n    this.left = ColorGeom.get32(left === undefined ? 0xc9cfd0 : left);\r\n    this.right = ColorGeom.get32(right === undefined ? 0xe3e3e3 : right);\r\n    this.horizontal = ColorGeom.get32(\r\n      horizontal === undefined ? 0xeeeff0 : horizontal\r\n    );\r\n  }\r\n\r\n  public getByHorizontalColor(horizontal: number): CubeColor {\r\n    return new CubeColor(\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 4),\r\n      // Apply highlight\r\n      ColorGeom.applyBrightness(horizontal, 0, true),\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 2),\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain),\r\n      horizontal\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[CubeColor]\";\r\n  }\r\n}\r\n","import { AbstractColor } from \"./AbstractColor\";\r\nimport { ColorGeom } from \"../utils/ColorGeom\";\r\n\r\nexport class LineColor extends AbstractColor {\r\n  constructor(border?: number, inner?: number) {\r\n    super({ border: border || null, inner: inner || null });\r\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineColor]\";\r\n  }\r\n}\r\n","import { AbstractColor } from \"./AbstractColor\";\r\nimport { ColorGeom } from \"../utils/ColorGeom\";\r\n\r\nexport class PyramidColor extends AbstractColor {\r\n  public brightnessGain = -20;\r\n\r\n  constructor(\r\n    border?: number,\r\n    borderHighlight?: number,\r\n    left?: number,\r\n    right?: number\r\n  ) {\r\n    super();\r\n    this.border = ColorGeom.get32(border === undefined ? 0x949698 : border);\r\n    this.borderHighlight = ColorGeom.get32(\r\n      borderHighlight === undefined ? 0xffffff : borderHighlight\r\n    );\r\n    this.left = ColorGeom.get32(left === undefined ? 0xe6e8e9 : left);\r\n    this.right = ColorGeom.get32(right === undefined ? 0xeeeff0 : right);\r\n  }\r\n\r\n  public getByRightColor(right: number): PyramidColor {\r\n    return new PyramidColor(\r\n      ColorGeom.applyBrightness(right, this.brightnessGain * 4),\r\n      // Apply highlight\r\n      ColorGeom.applyBrightness(right, 0, true),\r\n      ColorGeom.applyBrightness(right, this.brightnessGain),\r\n      right\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[PyramidColor]\";\r\n  }\r\n}\r\n","import { AbstractColor } from \"./AbstractColor\";\r\nimport { ColorGeom } from \"../utils/ColorGeom\";\r\n\r\nexport class SideColor extends AbstractColor {\r\n  public brightnessGain = -20;\r\n\r\n  constructor(border?: number, inner?: number) {\r\n    super();\r\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\r\n    this.inner = ColorGeom.get32(inner === undefined ? 0xeeeeee : inner);\r\n  }\r\n\r\n  public getByInnerColor(inner: number): SideColor {\r\n    return new SideColor(\r\n      ColorGeom.applyBrightness(inner, this.brightnessGain * 4),\r\n      inner\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SideColor]\";\r\n  }\r\n}\r\n","import { AbstractColor } from \"./AbstractColor\";\r\nimport { ColorGeom } from \"../utils/ColorGeom\";\r\n\r\nexport class SlopeColor extends AbstractColor {\r\n  public brightnessGain = -20;\r\n\r\n  constructor(\r\n    border?: number,\r\n    borderHighlight?: number,\r\n    left?: number,\r\n    right?: number,\r\n    leftSlope?: number,\r\n    rightSlope?: number\r\n  ) {\r\n    super();\r\n    this.border = ColorGeom.get32(border === undefined ? 0x949698 : border);\r\n    this.borderHighlight = ColorGeom.get32(\r\n      borderHighlight === undefined ? 0xffffff : borderHighlight\r\n    );\r\n    this.left = ColorGeom.get32(left === undefined ? 0xc9cfd0 : left);\r\n    this.right = ColorGeom.get32(right === undefined ? 0xe6e8e9 : right);\r\n    this.leftSlope = ColorGeom.get32(\r\n      leftSlope === undefined ? 0xdbdbdb : leftSlope\r\n    );\r\n    this.rightSlope = ColorGeom.get32(\r\n      rightSlope === undefined ? 0xdbdbdb : rightSlope\r\n    );\r\n  }\r\n\r\n  /*\r\n   * Horizontal side doesn't actually exist in the Slope primitive.\r\n   * You can assign the same horizontal color as cube\r\n   * so that you will be able to arrange the slope with cube\r\n   */\r\n  public getByHorizontalColor(horizontal: number): SlopeColor {\r\n    return new SlopeColor(\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 4),\r\n      // Apply highlight\r\n      ColorGeom.applyBrightness(horizontal, 0, true),\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 2),\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain),\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 1.5),\r\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 0.5)\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SlopeColor]\";\r\n  }\r\n}\r\n","export class AbstractDimension {\r\n  /**\r\n   * The x Axis dimensions in 22.6 degrees coordinate\r\n   */\r\n  public xAxis: number | null;\r\n\r\n  /**\r\n   * The y Axis dimensions in 22.6 degrees coordinate\r\n   */\r\n  public yAxis: number | null;\r\n\r\n  /**\r\n   * The z Axis dimensions in 22.6 degrees coordinate\r\n   */\r\n  public zAxis: number | null;\r\n\r\n  /**\r\n   * Pyramid tall mode\r\n   */\r\n  public tall: boolean;\r\n\r\n  constructor({\r\n    xAxis = null,\r\n    yAxis = null,\r\n    zAxis = null,\r\n    tall = false,\r\n  }: {\r\n    xAxis?: number | null;\r\n    yAxis?: number | null;\r\n    zAxis?: number | null;\r\n    tall?: boolean;\r\n  } = {}) {\r\n    this.xAxis = xAxis;\r\n    this.yAxis = yAxis;\r\n    this.zAxis = zAxis;\r\n    this.tall = tall;\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[AbstractDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class BrickDimension extends AbstractDimension {\r\n  constructor(xAxis?: number, yAxis?: number) {\r\n    super();\r\n    this.xAxis = xAxis || 30;\r\n    this.yAxis = yAxis || 30;\r\n\r\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\r\n      throw new Error(\"xAxis / yAxis must be an even number\");\r\n    }\r\n\r\n    // If xAxis or yAxis = 4 then floodFill can not be applied\r\n    if (this.xAxis <= 4 || this.yAxis <= 4) {\r\n      throw new Error(\"Dimensions are too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[BrickDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class CubeDimension extends AbstractDimension {\r\n  constructor(xAxis?: number, yAxis?: number, zAxis?: number) {\r\n    super();\r\n    this.xAxis = xAxis || 30;\r\n    this.yAxis = yAxis || 30;\r\n    this.zAxis = zAxis || 30;\r\n\r\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\r\n      throw new Error(\"xAxis / yAxis must be an even number\");\r\n    }\r\n\r\n    // If axis = 4 then floodFill can not be applied\r\n    if (this.xAxis <= 4 || this.yAxis <= 4 || this.zAxis <= 2) {\r\n      throw new Error(\"Dimensions are too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[CubeDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class LineXDimension extends AbstractDimension {\r\n  constructor(xAxis?: number) {\r\n    super();\r\n    this.xAxis = xAxis || 30;\r\n\r\n    if (this.xAxis % 2 === 1) {\r\n      throw new Error(\"xAxis must be an even number\");\r\n    }\r\n\r\n    if (this.xAxis < 2) {\r\n      throw new Error(\"Dimension is too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineXDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class LineYDimension extends AbstractDimension {\r\n  constructor(yAxis?: number) {\r\n    super();\r\n    this.yAxis = yAxis || 30;\r\n\r\n    if (this.yAxis % 2 === 1) {\r\n      throw new Error(\"yAxis must be an even number\");\r\n    }\r\n\r\n    if (this.yAxis < 2) {\r\n      throw new Error(\"Dimension is too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineYDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class LineZDimension extends AbstractDimension {\r\n  constructor(zAxis?: number) {\r\n    super();\r\n    this.zAxis = zAxis || 30;\r\n\r\n    if (this.zAxis <= 0) {\r\n      throw new Error(\"Dimension is too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineZDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class PyramidDimension extends AbstractDimension {\r\n  constructor(axis?: number, tall?: boolean) {\r\n    super();\r\n    this.xAxis = axis || 30;\r\n    this.yAxis = axis || 30;\r\n    this.tall = tall || false;\r\n\r\n    if (this.xAxis % 2 === 1) {\r\n      throw new Error(\"Axis must be an even number\");\r\n    }\r\n\r\n    if (this.xAxis <= 4) {\r\n      throw new Error(\"Dimension is too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[PyramidDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class SideXDimension extends AbstractDimension {\r\n  constructor(xAxis?: number, zAxis?: number) {\r\n    super();\r\n    this.xAxis = xAxis || 30;\r\n    this.zAxis = zAxis || 30;\r\n\r\n    if (this.xAxis % 2 === 1) {\r\n      throw new Error(\"xAxis must be an even number\");\r\n    }\r\n\r\n    // If xAxis or zAxis = 4 floodFill cannot be applied\r\n    if (this.xAxis <= 4 || this.zAxis <= 2) {\r\n      throw new Error(\"Dimensions are too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SideXDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class SideYDimension extends AbstractDimension {\r\n  constructor(yAxis?: number, zAxis?: number) {\r\n    super();\r\n    this.yAxis = yAxis || 30;\r\n    this.zAxis = zAxis || 30;\r\n\r\n    if (this.yAxis % 2 === 1) {\r\n      throw new Error(\"yAxis must be an even number\");\r\n    }\r\n\r\n    // If yAxis or zAxis = 4 floodFill cannot be applied\r\n    if (this.yAxis <= 4 || this.zAxis <= 2) {\r\n      throw new Error(\"Dimensions are too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SideYDimension]\";\r\n  }\r\n}\r\n","import { AbstractDimension } from \"./AbstractDimension\";\r\n\r\nexport class SlopeDimension extends AbstractDimension {\r\n  constructor(xAxis?: number, yAxis?: number) {\r\n    super();\r\n    this.xAxis = xAxis || 30;\r\n    this.yAxis = yAxis || 30;\r\n\r\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\r\n      throw new Error(\"xAxis and yAxis must be even numbers\");\r\n    }\r\n\r\n    if (this.xAxis <= 4 || this.yAxis <= 4) {\r\n      throw new Error(\"Dimensions are too small\");\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SlopeDimension]\";\r\n  }\r\n}\r\n","import type { Dimension } from \"../dimensions\";\r\nimport type { Color } from \"../colors\";\r\nimport type { BitmapData } from \"../display/BitmapData\";\r\nimport type { Matrix } from \"../geom\";\r\n\r\nexport class AbstractPrimitive {\r\n  /**\r\n   * The canvas for drawImage\r\n   */\r\n  public canvas: HTMLCanvasElement | null;\r\n\r\n  /**\r\n   * The width of the bitmap in 2d flash coordinate\r\n   */\r\n  protected w: number | null;\r\n\r\n  /**\r\n   * The height of the bitmap in 2d flash coordinate\r\n   */\r\n  protected h: number | null;\r\n\r\n  /**\r\n   * The dimension of primitive in 3d pixel coordinate\r\n   */\r\n  protected dimension: Dimension | null;\r\n\r\n  /**\r\n   * The color obj of the primitive\r\n   */\r\n  protected color: Color | null;\r\n\r\n  /**\r\n   * The border option of the primitive\r\n   */\r\n  protected border: boolean | null;\r\n\r\n  /**\r\n   * The source bitmapData containing pixel graphic\r\n   */\r\n  protected bitmapData: BitmapData | null;\r\n\r\n  /**\r\n   * The preserve canvas option\r\n   */\r\n  protected useDefaultCanvas: boolean | null;\r\n\r\n  /**\r\n   * The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n   */\r\n  protected matrix: Matrix | null;\r\n\r\n  constructor({\r\n    canvas = null,\r\n    w = null,\r\n    h = null,\r\n    dimension = null,\r\n    color = null,\r\n    border = null,\r\n    bitmapData = null,\r\n    useDefaultCanvas = null,\r\n    matrix = null,\r\n  }: {\r\n    canvas?: HTMLCanvasElement | null;\r\n    w?: number | null;\r\n    h?: number | null;\r\n    dimension?: Dimension | null;\r\n    color?: Color | null;\r\n    border?: boolean | null;\r\n    bitmapData?: BitmapData | null;\r\n    useDefaultCanvas?: boolean | null;\r\n    matrix?: Matrix | null;\r\n  } = {}) {\r\n    this.canvas = canvas;\r\n    this.w = w;\r\n    this.h = h;\r\n    this.dimension = dimension;\r\n    this.color = color;\r\n    this.border = border;\r\n    this.bitmapData = bitmapData;\r\n    this.useDefaultCanvas = useDefaultCanvas;\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[AbstractPrimitive]\";\r\n  }\r\n}\r\n","export class Matrix {\r\n  /**\r\n   * Position (0, 0) in a 3x3 matrix.\r\n   * */\r\n  public a: number;\r\n\r\n  /**\r\n   * Position (0, 1) in a 3x3 matrix.\r\n   * */\r\n  public b: number;\r\n\r\n  /**\r\n   * Position (1, 0) in a 3x3 matrix.\r\n   * */\r\n  public c: number;\r\n\r\n  /**\r\n   * Position (1, 1) in a 3x3 matrix.\r\n   * */\r\n  public d: number;\r\n\r\n  /**\r\n   * Position (2, 0) in a 3x3 matrix.\r\n   * */\r\n  public tx: number;\r\n\r\n  /**\r\n   * Position (2, 1) in a 3x3 matrix.\r\n   * */\r\n  public ty: number;\r\n\r\n  constructor(\r\n    a?: number,\r\n    b?: number,\r\n    c?: number,\r\n    d?: number,\r\n    tx?: number,\r\n    ty?: number\r\n  ) {\r\n    this.a = a === undefined ? 1 : a;\r\n    this.b = b || 0;\r\n    this.c = c || 0;\r\n    this.d = d === undefined ? 1 : d;\r\n    this.tx = tx || 0;\r\n    this.ty = ty || 0;\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[Matrix]\";\r\n  }\r\n}\r\n","export class Point {\r\n  public x: number;\r\n\r\n  public y: number;\r\n\r\n  constructor(x?: number, y?: number) {\r\n    this.x = x === undefined ? 0 : x;\r\n    this.y = y === undefined ? 0 : y;\r\n  }\r\n\r\n  public toString(): string {\r\n    return `[Point x: ${this.x}, y: ${this.y}]`;\r\n  }\r\n}\r\n","import { Point } from \"./Point\";\r\n\r\nexport class Point3D {\r\n  public x: number;\r\n\r\n  public y: number;\r\n\r\n  public z: number;\r\n\r\n  constructor(x?: number, y?: number, z?: number) {\r\n    this.x = x === undefined ? 0 : x;\r\n    this.y = y === undefined ? 0 : y;\r\n    this.z = z === undefined ? 0 : z;\r\n  }\r\n\r\n  public toGlobalCoordinates(offset?: { x: number; y: number }): Point {\r\n    const p2D = new Point(\r\n      this.x - this.y,\r\n      Math.floor(this.x / 2 + this.y / 2) - this.z\r\n    );\r\n\r\n    if (offset !== undefined) {\r\n      p2D.x += offset.x;\r\n      p2D.y += offset.y;\r\n    }\r\n\r\n    return p2D;\r\n  }\r\n\r\n  public toString(): string {\r\n    return `[Point3D x : ${this.x}, y : ${this.y}, z: ${this.z}]`;\r\n  }\r\n}\r\n","export abstract class CanvasManager {\r\n  public static defaultCanvas: HTMLCanvasElement | null;\r\n\r\n  public static getDefaultCanvas(): HTMLCanvasElement | null {\r\n    this.defaultCanvas = this.defaultCanvas || document.createElement(\"canvas\");\r\n    return this.defaultCanvas;\r\n  }\r\n\r\n  public static getNewCanvas(): HTMLCanvasElement {\r\n    return document.createElement(\"canvas\");\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[CanvasManager]\";\r\n  }\r\n}\r\n","/* eslint-disable no-bitwise */\r\n\r\nimport { CanvasManager } from \"../utils/CanvasManager\";\r\n\r\nexport class BitmapData {\r\n  public imageData: ImageData | null;\r\n\r\n  public canvas: HTMLCanvasElement | null;\r\n\r\n  public context: CanvasRenderingContext2D | null;\r\n\r\n  constructor(w?: number, h?: number, useDefaultCanvas?: boolean) {\r\n    if (w === undefined || h === undefined) {\r\n      throw new Error(\"BitmapData width or height is missing\");\r\n    }\r\n\r\n    if (useDefaultCanvas) {\r\n      this.canvas = CanvasManager.getDefaultCanvas();\r\n    } else {\r\n      this.canvas = CanvasManager.getNewCanvas();\r\n    }\r\n\r\n    this.imageData = null;\r\n    this.context = null;\r\n\r\n    if (this.canvas) {\r\n      this.canvas.setAttribute(\"width\", w.toString());\r\n      this.canvas.setAttribute(\"height\", h.toString());\r\n\r\n      this.context = this.canvas.getContext(\"2d\") || null;\r\n\r\n      if (this.context) {\r\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        (this.context as any).mozImageSmoothingEnabled = false;\r\n        (this.context as any).msImageSmoothingEnabled = false;\r\n        this.context.imageSmoothingEnabled = false;\r\n\r\n        this.imageData = this.context.createImageData(w, h);\r\n      }\r\n    }\r\n  }\r\n\r\n  public setPixel(posX: number, posY: number, color: number): void {\r\n    if (this.imageData) {\r\n      const index = (posY * this.imageData.width + posX) * 4;\r\n      this.setPixelByIndex(index, color);\r\n    }\r\n  }\r\n\r\n  public setPixelByIndex(index: number, color: number): void {\r\n    if (this.imageData) {\r\n      const pixels = this.imageData.data;\r\n\r\n      pixels[index] = (color >>> 16) & 0xff;\r\n      pixels[index + 1] = (color >>> 8) & 0xff;\r\n      pixels[index + 2] = (color >>> 0) & 0xff;\r\n      pixels[index + 3] = (color >>> 24) & 0xff;\r\n    }\r\n  }\r\n\r\n  public checkPixelAvailable(x: number, y: number): boolean {\r\n    if (this.imageData) {\r\n      const index = (y * this.imageData.width + x) * 4;\r\n      return this.imageData.data[index + 3] === 0;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public floodFill(posX: number, posY: number, color: number): void {\r\n    if (((color >>> 24) & 0xff) === 0x00 || !this.imageData) {\r\n      // Transparent flood fill\r\n      return;\r\n    }\r\n\r\n    let x = posX;\r\n    let y = posY;\r\n\r\n    const stack: number[] = [];\r\n    let nowCol: number[] = [];\r\n    let prevCol: number[] = [];\r\n\r\n    let col: number;\r\n    let row: number;\r\n    let matchFlag: boolean;\r\n    let newStart: number;\r\n\r\n    const w = this.imageData.width;\r\n    const h = this.imageData.height;\r\n\r\n    let i: number;\r\n    let j: number;\r\n\r\n    // Bound reach\r\n    if (x < 0 || y < 0 || x >= w || y >= h) {\r\n      return;\r\n    }\r\n\r\n    // First point check fail\r\n    if (!this.checkPixelAvailable(x, y)) {\r\n      throw new Error(\"Start point for flood fill is already filled\");\r\n    }\r\n\r\n    // Left side flood fill\r\n    for (col = x; col >= 0; col -= 1) {\r\n      // Top side\r\n      for (row = y; row >= 0; row -= 1) {\r\n        if (this.checkPixelAvailable(col, row)) {\r\n          // Available pixel\r\n          stack.push((row * w + col) * 4);\r\n          nowCol.push(row);\r\n        } else {\r\n          // First one is invalid pixel and not at col top\r\n          if (row === y && this.checkPixelAvailable(col + 1, row - 1)) {\r\n            // Next one is valid\r\n            if (this.checkPixelAvailable(col, row - 1)) {\r\n              newStart = row - 1;\r\n            } else if (this.checkPixelAvailable(col + 1, row - 2)) {\r\n              newStart = row - 2;\r\n            } else {\r\n              // Fail, assign max value to avoid loop below\r\n              newStart = -1;\r\n            }\r\n\r\n            for (row = newStart; row >= 0; row -= 1) {\r\n              if (this.checkPixelAvailable(col, row)) {\r\n                // Available pixel\r\n                stack.push((row * w + col) * 4);\r\n                nowCol.push(row);\r\n              } else {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Bottom side\r\n      for (row = y; row < h; row += 1) {\r\n        if (this.checkPixelAvailable(col, row)) {\r\n          // Available pixel\r\n          stack.push((row * w + col) * 4);\r\n          nowCol.push(row);\r\n        } else {\r\n          // First one is invalid pixel and not at col bottom\r\n          if (row === y && this.checkPixelAvailable(col + 1, row + 1)) {\r\n            // Next one is valid\r\n            if (this.checkPixelAvailable(col, row + 1)) {\r\n              newStart = row + 1;\r\n            } else if (this.checkPixelAvailable(col + 1, row + 2)) {\r\n              newStart = row + 2;\r\n            } else {\r\n              // Fail, assign max value to avoid loop below\r\n              newStart = h;\r\n            }\r\n\r\n            for (row = newStart; row < h; row += 1) {\r\n              if (this.checkPixelAvailable(col, row)) {\r\n                // AAvailable pixel\r\n                stack.push((row * w + col) * 4);\r\n                nowCol.push(row);\r\n              } else {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Compare with previous column\r\n      // for first column,\r\n      // the given point should be inside the container\r\n      if (col === x) {\r\n        prevCol = nowCol.concat();\r\n      }\r\n\r\n      matchFlag = false;\r\n\r\n      for (i = 0; i < prevCol.length; i += 1) {\r\n        for (j = 0; j < prevCol.length; j += 1) {\r\n          if (nowCol[j] === prevCol[i]) {\r\n            matchFlag = true;\r\n            y = prevCol[i]!;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (matchFlag) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (matchFlag) {\r\n        prevCol = nowCol.concat();\r\n        nowCol = [];\r\n      } else {\r\n        // Bound reach\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Reset start point\r\n    x = posX;\r\n    y = posY;\r\n    prevCol = [];\r\n    nowCol = [];\r\n\r\n    // Right side flood fill\r\n    for (col = x; col < w; col += 1) {\r\n      // Top side\r\n      for (row = y; row >= 0; row -= 1) {\r\n        if (this.checkPixelAvailable(col, row)) {\r\n          // Available pixel\r\n          stack.push((row * w + col) * 4);\r\n          nowCol.push(row);\r\n        } else {\r\n          // First one is invalid pixel and not at col top\r\n          if (row === y && this.checkPixelAvailable(col - 1, row - 1)) {\r\n            // Next one is valid\r\n            if (this.checkPixelAvailable(col, row - 1)) {\r\n              newStart = row - 1;\r\n            } else if (this.checkPixelAvailable(col - 1, row - 2)) {\r\n              newStart = row - 2;\r\n            } else {\r\n              // Fail, assign max value to avoid loop below\r\n              newStart = -1;\r\n            }\r\n\r\n            for (row = newStart; row >= 0; row -= 1) {\r\n              if (this.checkPixelAvailable(col, row)) {\r\n                // Available pixel\r\n                stack.push((row * w + col) * 4);\r\n                nowCol.push(row);\r\n              } else {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Bottom side\r\n      for (row = y; row < h; row += 1) {\r\n        if (this.checkPixelAvailable(col, row)) {\r\n          // Available pixel\r\n          stack.push((row * w + col) * 4);\r\n          nowCol.push(row);\r\n        } else {\r\n          // First one is invalid pixel && not at col bottom\r\n          if (row === y && this.checkPixelAvailable(col - 1, row + 1)) {\r\n            // Next one is valid\r\n            if (this.checkPixelAvailable(col, row + 1)) {\r\n              newStart = row + 1;\r\n            } else if (this.checkPixelAvailable(col - 1, row + 2)) {\r\n              newStart = row + 2;\r\n            } else {\r\n              // Fail, assign max value to avoid loop below\r\n              newStart = h;\r\n            }\r\n\r\n            for (row = newStart; row < h; row += 1) {\r\n              if (this.checkPixelAvailable(col, row)) {\r\n                // Available pixel\r\n                stack.push((row * w + col) * 4);\r\n                nowCol.push(row);\r\n              } else {\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Compare with previous column\r\n      // for first column,\r\n      // the given point should be inside the container\r\n      if (col === x) {\r\n        prevCol = nowCol.concat();\r\n      }\r\n\r\n      matchFlag = false;\r\n\r\n      for (i = 0; i < prevCol.length; i += 1) {\r\n        for (j = 0; j < prevCol.length; j += 1) {\r\n          if (nowCol[j] === prevCol[i]) {\r\n            matchFlag = true;\r\n            y = prevCol[i]!;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (matchFlag) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (matchFlag) {\r\n        prevCol = nowCol.concat();\r\n        nowCol = [];\r\n      } else {\r\n        // Bound reach\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Fill image data\r\n    for (i = 0; i < stack.length; i += 1) {\r\n      this.setPixelByIndex(stack[i]!, color);\r\n    }\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[BitmapData]\";\r\n  }\r\n}\r\n","import { BrickDimension } from \"../dimensions\";\r\nimport { SideColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class Brick extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: BrickDimension,\r\n    color?: SideColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new BrickDimension() : dimension;\r\n    this.color = color === undefined ? new SideColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h = (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h -= 1;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate ZERO point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\r\n    this.matrix.ty = 0;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const xOffsetInner = this.dimension!.yAxis! - 2;\r\n    const yOffsetInner = 0;\r\n    const xOffsetOut = this.dimension!.xAxis! - 1;\r\n    const yOffsetOut = (this.h || 0) - 1;\r\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\r\n\r\n    // X axis\r\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        xOffsetInner + i,\r\n        yOffsetInner + Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        xOffsetOut - i,\r\n        yOffsetOut - Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n    }\r\n\r\n    // Y axis\r\n    for (let j = 0; j < this.dimension!.yAxis!; j += 1) {\r\n      this.bitmapData!.setPixel(\r\n        xOffsetInner + 1 - j,\r\n        yOffsetInner + Math.floor(j / 2),\r\n        borderColor\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        xOffsetOut - 1 + j,\r\n        yOffsetOut - Math.floor(j / 2),\r\n        borderColor\r\n      );\r\n    }\r\n\r\n    // Fill a pixel graphic enclosed\r\n    this.bitmapData!.floodFill(\r\n      Math.floor(this.w! / 2),\r\n      Math.floor(this.h! / 2),\r\n      this.color!.inner!\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[Brick]\";\r\n  }\r\n}\r\n","import { Point3D } from \"../geom\";\r\nimport type { AbstractPrimitive } from \"../primitives\";\r\n\r\nexport class PixelObject {\r\n  public x: number | null;\r\n\r\n  public y: number | null;\r\n\r\n  public canvas: HTMLCanvasElement | null;\r\n\r\n  constructor(primitive?: AbstractPrimitive, point3D?: Point3D) {\r\n    if (!primitive) {\r\n      throw new Error(\"Primitive is not defined\");\r\n    }\r\n\r\n    const p3D = point3D || new Point3D();\r\n\r\n    this.canvas = primitive.canvas;\r\n    this.x = (primitive as any).matrix!.tx + p3D.x - p3D.y;\r\n    this.y =\r\n      (primitive as any).matrix!.ty + Math.floor(p3D.x / 2 + p3D.y / 2) - p3D.z;\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[PixelObject]\";\r\n  }\r\n}\r\n","import { SideXDimension } from \"../dimensions\";\r\nimport { SideColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class SideX extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: SideXDimension,\r\n    color?: SideColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new SideXDimension() : dimension;\r\n    this.color = color === undefined ? new SideColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis;\r\n    this.h = this.dimension!.zAxis! + this.dimension!.xAxis! / 2;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = 0;\r\n    this.matrix.ty = -this.dimension!.zAxis!;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const xOffsetInner = 0;\r\n    const yOffsetInner = this.dimension!.zAxis!;\r\n    const xOffsetOut = this.dimension!.xAxis! - 1;\r\n    const yOffsetOut = this.h! - this.dimension!.zAxis! - 1;\r\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\r\n\r\n    // X axis\r\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        xOffsetInner + i,\r\n        yOffsetInner + Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n      this.bitmapData!.setPixel(\r\n        xOffsetOut - i,\r\n        yOffsetOut - Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n    }\r\n\r\n    // Z axis\r\n    for (let j = 0; j < this.dimension!.zAxis!; j += 1) {\r\n      this.bitmapData!.setPixel(xOffsetInner, yOffsetInner - j, borderColor);\r\n      this.bitmapData!.setPixel(xOffsetOut, yOffsetOut + j, borderColor);\r\n    }\r\n\r\n    // fill an pixel graphic enclosed\r\n    this.bitmapData!.floodFill(\r\n      Math.floor(this.w! / 2),\r\n      Math.floor(this.h! / 2),\r\n      this.color!.inner!\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SideX]\";\r\n  }\r\n}\r\n","import { SideYDimension } from \"../dimensions\";\r\nimport { SideColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class SideY extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: SideYDimension,\r\n    color?: SideColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new SideYDimension() : dimension;\r\n    this.color = color === undefined ? new SideColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.yAxis!;\r\n    this.h = this.dimension!.zAxis! + this.dimension!.yAxis! / 2;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\r\n    this.matrix.ty = -this.dimension!.zAxis!;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const xOffsetInner = 0;\r\n    const yOffsetInner = this.h! - this.dimension!.zAxis! - 1;\r\n    const xOffsetOut = this.dimension!.yAxis! - 1;\r\n    const yOffsetOut = this.dimension!.zAxis!;\r\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\r\n\r\n    // Y axis\r\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        xOffsetInner + i,\r\n        yOffsetInner - Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        xOffsetOut - i,\r\n        yOffsetOut + Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n    }\r\n\r\n    // Z axis\r\n    for (let j = 0; j < this.dimension!.zAxis!; j += 1) {\r\n      this.bitmapData!.setPixel(xOffsetInner, yOffsetInner + j, borderColor);\r\n      this.bitmapData!.setPixel(xOffsetOut, yOffsetOut - j, borderColor);\r\n    }\r\n\r\n    // Fill a pixel graphic enclosed\r\n    this.bitmapData!.floodFill(\r\n      Math.floor(this.w! / 2),\r\n      Math.floor(this.h! / 2),\r\n      this.color!.inner!\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SideY]\";\r\n  }\r\n}\r\n","import {\r\n  CubeDimension,\r\n  BrickDimension,\r\n  SideYDimension,\r\n  SideXDimension,\r\n} from \"../dimensions\";\r\nimport { CubeColor, SideColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { PixelObject } from \"../display/PixelObject\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\nimport { Brick } from \"./Brick\";\r\nimport { SideX } from \"./SideX\";\r\nimport { SideY } from \"./SideY\";\r\n\r\nexport class Cube extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: CubeDimension,\r\n    color?: CubeColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new CubeDimension() : dimension;\r\n    this.color = color === undefined ? new CubeColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h =\r\n      this.dimension!.zAxis! +\r\n      (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h -= 1;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\r\n    this.matrix.ty = -this.dimension!.zAxis!;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    let offsetX: number;\r\n    let offsetY: number;\r\n\r\n    // Horizontal layer\r\n    const brick = new Brick(\r\n      new BrickDimension(this.dimension!.xAxis!, this.dimension!.yAxis!),\r\n      new SideColor(this.color!.border!, this.color!.horizontal!),\r\n      this.border!\r\n    );\r\n\r\n    // Left side\r\n    const sideX = new SideX(\r\n      new SideXDimension(this.dimension!.xAxis!, this.dimension!.zAxis!),\r\n      new SideColor(this.color!.border!, this.color!.left!),\r\n      this.border!\r\n    );\r\n\r\n    // Right side\r\n    const sideY = new SideY(\r\n      new SideYDimension(this.dimension!.yAxis!, this.dimension!.zAxis!),\r\n      new SideColor(this.color!.border!, this.color!.right!),\r\n      this.border!\r\n    );\r\n\r\n    const poBrick = new PixelObject(brick);\r\n    const poX = new PixelObject(sideX);\r\n    const poY = new PixelObject(sideY);\r\n\r\n    const ctx = this.bitmapData!.context!;\r\n\r\n    ctx.drawImage(\r\n      poBrick.canvas!,\r\n      poBrick.x! + this.dimension!.yAxis! - 2,\r\n      poBrick.y!\r\n    );\r\n\r\n    ctx.drawImage(\r\n      poX.canvas!,\r\n      poX.x!,\r\n      poX.y! + this.dimension!.zAxis! + this.dimension!.yAxis! / 2 - 1\r\n    );\r\n\r\n    ctx.drawImage(\r\n      poY.canvas!,\r\n      poY.x! + this.w! - 2,\r\n      poX.y! + this.dimension!.zAxis! + this.dimension!.xAxis! / 2 - 1\r\n    );\r\n\r\n    // Highlight & highlight fix\r\n    const bmd = new BitmapData(this.w!, this.h!);\r\n\r\n    if (this.border) {\r\n      offsetX = this.dimension!.xAxis! - 2;\r\n      offsetY = (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2 - 2;\r\n\r\n      // The 2px in bounding without highlight\r\n      for (let i = 0; i < this.dimension!.xAxis! - 2; i += 1) {\r\n        bmd.setPixel(\r\n          offsetX + 1 - i,\r\n          offsetY - Math.floor(i / 2),\r\n          this.color!.borderHighlight!\r\n        );\r\n      }\r\n\r\n      // the 2px in bounding without highlight\r\n      for (let j = 0; j < this.dimension!.yAxis! - 2; j += 1) {\r\n        bmd.setPixel(\r\n          offsetX + j,\r\n          offsetY - Math.floor(j / 2),\r\n          this.color!.borderHighlight!\r\n        );\r\n      }\r\n\r\n      for (let k = 0; k < this.dimension!.zAxis!; k += 1) {\r\n        bmd.setPixel(offsetX, offsetY + k, this.color!.borderHighlight!);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.dimension!.zAxis!; i += 1) {\r\n        bmd.setPixel(\r\n          this.dimension!.xAxis! - 2,\r\n          (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2 - 1 + i,\r\n          this.color!.left!\r\n        );\r\n      }\r\n    }\r\n\r\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\r\n    ctx.drawImage(bmd.canvas!, 0, 0);\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[Cube]\";\r\n  }\r\n}\r\n","import { LineXDimension } from \"../dimensions\";\r\nimport { LineColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class LineX extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: LineXDimension,\r\n    color?: LineColor,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.dimension = dimension === undefined ? new LineXDimension() : dimension;\r\n    this.color = color === undefined ? new LineColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis!;\r\n    this.h = this.dimension!.xAxis! / 2;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = 0;\r\n    this.matrix.ty = 0;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const xOffsetBorder = 0;\r\n    const yOffsetBorder = 0;\r\n    const borderColor = this.color!.border!;\r\n\r\n    // X axis\r\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        xOffsetBorder + i,\r\n        yOffsetBorder + Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineX]\";\r\n  }\r\n}\r\n","import { LineYDimension } from \"../dimensions\";\r\nimport { LineColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class LineY extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: LineYDimension,\r\n    color?: LineColor,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.dimension = dimension === undefined ? new LineYDimension() : dimension;\r\n    this.color = color === undefined ? new LineColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.yAxis!;\r\n    this.h = this.dimension!.yAxis! / 2;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\r\n    this.matrix.ty = 0;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const xOffsetBorder = this.dimension!.yAxis! - 1;\r\n    const yOffsetBorder = 0;\r\n    const borderColor = this.color!.border!;\r\n\r\n    // Y axis\r\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        xOffsetBorder - i,\r\n        yOffsetBorder + Math.floor(i / 2),\r\n        borderColor\r\n      );\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineY]\";\r\n  }\r\n}\r\n","import { LineZDimension } from \"../dimensions\";\r\nimport { LineColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class LineZ extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: LineZDimension,\r\n    color?: LineColor,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.dimension = dimension === undefined ? new LineZDimension() : dimension;\r\n    this.color = color === undefined ? new LineColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = 1;\r\n    this.h = this.dimension!.zAxis!;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = 0;\r\n    this.matrix.ty = -this.dimension!.zAxis! + 1;\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const xOffsetBorder = 0;\r\n    const yOffsetBorder = 0;\r\n    const borderColor = this.color!.border!;\r\n\r\n    // Y axis\r\n    for (let i = 0; i < this.dimension!.zAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(xOffsetBorder, yOffsetBorder + i, borderColor);\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[LineZ]\";\r\n  }\r\n}\r\n","import { PyramidDimension } from \"../dimensions\";\r\nimport { PyramidColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class Pyramid extends AbstractPrimitive {\r\n  private readonly hSize: number;\r\n\r\n  private readonly hOffset: number;\r\n\r\n  constructor(\r\n    dimension?: PyramidDimension,\r\n    color?: PyramidColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension =\r\n      dimension === undefined ? new PyramidDimension() : dimension;\r\n    this.color = color === undefined ? new PyramidColor() : color;\r\n\r\n    this.hSize = this.dimension.tall\r\n      ? this.dimension!.xAxis! * 2\r\n      : this.dimension!.xAxis!;\r\n    this.hOffset = this.dimension.tall ? -3 : -2;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h = this.hSize + this.dimension!.xAxis! / 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h += this.hOffset;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -this.dimension!.xAxis! + 2;\r\n    this.matrix.ty =\r\n      -this.hSize / 2 +\r\n      2 -\r\n      (this.dimension!.tall ? this.dimension!.xAxis! / 2 : 1);\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const colorBorderLeft = this.border\r\n      ? this.color!.border!\r\n      : this.color!.left!;\r\n    const colorBorderRight = this.border\r\n      ? this.color!.border!\r\n      : this.color!.right!;\r\n\r\n    const colorBorderHighlight = this.border\r\n      ? this.color!.borderHighlight!\r\n      : colorBorderLeft;\r\n\r\n    // Z axis highlight\r\n    for (let k = 0; k < this.hSize + this.dimension!.xAxis! / 2 - 4; k += 1) {\r\n      this.bitmapData!.setPixel(\r\n        this.dimension!.xAxis! - 2,\r\n        k + 3 + this.hOffset,\r\n        colorBorderHighlight\r\n      );\r\n    }\r\n\r\n    // X axis\r\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        i,\r\n        this.hSize + Math.floor(i / 2) + this.hOffset,\r\n        colorBorderLeft\r\n      );\r\n    }\r\n\r\n    // Y axis\r\n    for (let j = 0; j < this.dimension!.xAxis!; j += 1) {\r\n      this.bitmapData!.setPixel(\r\n        j + this.dimension!.xAxis! - 2,\r\n        this.hSize +\r\n          this.dimension!.xAxis! / 2 -\r\n          Math.floor(j / 2) -\r\n          1 +\r\n          this.hOffset,\r\n        colorBorderRight\r\n      );\r\n    }\r\n\r\n    if (!this.dimension!.tall) {\r\n      // Left edge\r\n      for (let l = 0; l < this.hSize; l += 1) {\r\n        this.bitmapData!.setPixel(\r\n          l,\r\n          this.hSize - l + this.hOffset,\r\n          colorBorderLeft\r\n        );\r\n      }\r\n\r\n      // Right edge\r\n      for (let m = 0; m < this.hSize; m += 1) {\r\n        this.bitmapData!.setPixel(\r\n          m + this.hSize - 2,\r\n          m + 1 + this.hOffset,\r\n          colorBorderRight\r\n        );\r\n      }\r\n    } else {\r\n      // Left edge\r\n      for (let l = 0; l < this.hSize - 2; l += 1) {\r\n        this.bitmapData!.setPixel(\r\n          Math.floor(l / 2),\r\n          this.hSize - l + this.hOffset,\r\n          colorBorderLeft\r\n        );\r\n      }\r\n\r\n      // Right edge\r\n      for (let m = 2; m < this.hSize; m += 1) {\r\n        this.bitmapData!.setPixel(\r\n          Math.floor(m / 2) + this.dimension!.xAxis! - 2,\r\n          m + 1 + this.hOffset,\r\n          colorBorderRight\r\n        );\r\n      }\r\n    }\r\n\r\n    if (!this.border) {\r\n      this.bitmapData!.setPixel(\r\n        this.dimension!.xAxis! - 2,\r\n        this.hSize + this.dimension!.xAxis! / 2 - 1 + this.hOffset,\r\n        colorBorderLeft\r\n      );\r\n    }\r\n\r\n    // floodFill\r\n    this.bitmapData!.floodFill(\r\n      this.dimension!.xAxis! - 1,\r\n      this.hSize +\r\n        Math.floor((this.dimension!.xAxis! - 1) / 2) +\r\n        this.hOffset -\r\n        1,\r\n      this.color!.right!\r\n    );\r\n\r\n    this.bitmapData!.floodFill(\r\n      this.dimension!.xAxis! - 3,\r\n      this.hSize +\r\n        Math.floor((this.dimension!.xAxis! - 1) / 2) +\r\n        this.hOffset -\r\n        2,\r\n      this.color!.left!\r\n    );\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[Pyramid]\";\r\n  }\r\n}\r\n","import { SlopeColor } from \"../colors\";\r\nimport { SlopeDimension } from \"../dimensions\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class SlopeEast extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: SlopeDimension,\r\n    color?: SlopeColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\r\n    this.color = color === undefined ? new SlopeColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h = this.dimension!.xAxis! * 2 + this.dimension!.yAxis! / 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h -= 3;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\r\n    this.matrix.ty = -((this.dimension!.xAxis! * 3) / 2 - 2);\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const colorBorderLeft = this.border\r\n      ? this.color!.border!\r\n      : this.color!.left!;\r\n    const colorBorderRight = this.border\r\n      ? this.color!.border!\r\n      : this.color!.rightSlope!;\r\n\r\n    // Y axis\r\n    for (let j = 0; j < this.dimension!.yAxis!; j += 1) {\r\n      this.bitmapData!.setPixel(\r\n        j,\r\n        this.dimension!.yAxis! / 2 - Math.floor(j / 2) - 1,\r\n        colorBorderRight\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        j + this.dimension!.xAxis! - 2,\r\n        this.h! - Math.floor(j / 2) - 1,\r\n        colorBorderRight\r\n      );\r\n    }\r\n\r\n    // X axis\r\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        i,\r\n        this.h! - this.dimension!.xAxis! / 2 + Math.floor(i / 2),\r\n        colorBorderLeft\r\n      );\r\n    }\r\n\r\n    // X axis\r\n    for (\r\n      let k = this.dimension!.yAxis! / 2 - 1;\r\n      k < this.h! - this.dimension!.xAxis! / 2;\r\n      k += 1\r\n    ) {\r\n      this.bitmapData!.setPixel(0, k, colorBorderLeft);\r\n    }\r\n\r\n    // Slot\r\n    for (let m = 0; m < this.dimension!.xAxis! * 2 - 2; m += 1) {\r\n      this.bitmapData!.setPixel(\r\n        this.dimension!.yAxis! - 1 + Math.floor(m / 2),\r\n        m,\r\n        colorBorderRight\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        1 + Math.floor(m / 2),\r\n        this.dimension!.yAxis! / 2 + m - 1,\r\n        colorBorderRight\r\n      );\r\n    }\r\n\r\n    // floodFill\r\n    this.bitmapData!.floodFill(\r\n      this.dimension!.yAxis! - 2,\r\n      1,\r\n      this.color!.rightSlope!\r\n    );\r\n\r\n    this.bitmapData!.floodFill(\r\n      this.dimension!.xAxis! - 3,\r\n      this.h! - 3,\r\n      this.color!.left!\r\n    );\r\n\r\n    // Hack single pixel\r\n    this.bitmapData!.setPixel(\r\n      this.dimension!.xAxis! - 2,\r\n      this.h! - 2,\r\n      this.color!.left!\r\n    );\r\n\r\n    // Highlight\r\n    if (this.border) {\r\n      for (let n = 1; n < this.dimension!.xAxis! * 2 - 3; n += 1) {\r\n        this.bitmapData!.setPixel(\r\n          1 + Math.floor(n / 2),\r\n          this.dimension!.yAxis! / 2 + n - 1,\r\n          this.color!.borderHighlight!\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SlopeEast]\";\r\n  }\r\n}\r\n","import { SlopeDimension, SideXDimension } from \"../dimensions\";\r\nimport { SlopeColor, SideColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\nimport { SideX } from \"./SideX\";\r\n\r\nimport { PixelObject } from \"../display/PixelObject\";\r\n\r\nexport class SlopeNorth extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: SlopeDimension,\r\n    color?: SlopeColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\r\n    this.color = color === undefined ? new SlopeColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h = (this.dimension!.yAxis! * 3) / 2 + this.dimension!.xAxis! / 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h -= 3;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\r\n    this.matrix.ty = -(this.dimension!.yAxis! - 2);\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const colorBorderLeft = this.border\r\n      ? this.color!.border!\r\n      : this.color!.left!;\r\n    const colorBorderRight = this.border\r\n      ? this.color!.border!\r\n      : this.color!.right!;\r\n    const colorBorderHighlight = this.border\r\n      ? this.color!.borderHighlight\r\n      : this.color!.left;\r\n\r\n    const sideX = new SideX(\r\n      new SideXDimension(\r\n        this.dimension!.xAxis!,\r\n        this.h! - this.dimension!.xAxis! / 2\r\n      ),\r\n      new SideColor(colorBorderLeft, this.color!.left!)\r\n    );\r\n\r\n    const poX = new PixelObject(sideX);\r\n\r\n    const ctx = this.bitmapData!.context!;\r\n    ctx.drawImage(\r\n      poX.canvas!,\r\n      poX.x!,\r\n      poX.y! + this.h! - this.dimension!.xAxis! / 2\r\n    );\r\n\r\n    const bmd = new BitmapData(this.w!, this.h!);\r\n\r\n    // Close the path for floodFill\r\n    for (\r\n      let i = this.h! - (this.dimension!.yAxis! * 3) / 2 + 2;\r\n      i < this.h!;\r\n      i += 1\r\n    ) {\r\n      bmd.setPixel(this.dimension!.xAxis! - 1, i, colorBorderRight);\r\n    }\r\n\r\n    // Y axis\r\n    for (let j = 1; j < this.dimension!.yAxis!; j += 1) {\r\n      bmd.setPixel(\r\n        this.dimension!.xAxis! + j - 2,\r\n        this.h! - Math.floor(j / 2) - 1,\r\n        colorBorderRight\r\n      );\r\n\r\n      bmd.setPixel(\r\n        this.dimension!.xAxis! + j - 2,\r\n        this.dimension!.xAxis! / 2 - 2 + j,\r\n        colorBorderRight\r\n      );\r\n    }\r\n\r\n    // floodFill\r\n    bmd.floodFill(this.dimension!.xAxis! + 1, this.h! - 3, this.color!.right!);\r\n\r\n    // Highlight\r\n    for (let n = this.dimension!.xAxis! / 2; n < this.h! - 1; n += 1) {\r\n      bmd.setPixel(this.dimension!.xAxis! - 1, n, this.color!.right!);\r\n      bmd.setPixel(this.dimension!.xAxis! - 2, n, colorBorderHighlight!);\r\n    }\r\n\r\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\r\n    ctx.drawImage(bmd.canvas!, 0, 0);\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SlopeNorth]\";\r\n  }\r\n}\r\n","import { SlopeDimension } from \"../dimensions\";\r\nimport { SlopeColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\n\r\nexport class SlopeSouth extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: SlopeDimension,\r\n    color?: SlopeColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\r\n    this.color = color === undefined ? new SlopeColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h = this.dimension!.xAxis! / 2 + this.dimension!.yAxis! * 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h -= 3;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\r\n    this.matrix.ty = -((this.dimension!.yAxis! * 3) / 2 - 2);\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const colorBorderLeft = this.border\r\n      ? this.color!.border!\r\n      : this.color!.leftSlope!;\r\n    const colorBorderRight = this.border\r\n      ? this.color!.border!\r\n      : this.color!.right!;\r\n\r\n    // X axis\r\n    for (let j = 0; j < this.dimension!.xAxis!; j += 1) {\r\n      this.bitmapData!.setPixel(\r\n        j,\r\n        this.dimension!.yAxis! * 2 + Math.floor(j / 2) - 3,\r\n        colorBorderLeft\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        j + this.dimension!.yAxis! - 2,\r\n        Math.floor(j / 2),\r\n        colorBorderLeft\r\n      );\r\n    }\r\n\r\n    // Y axis\r\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\r\n      this.bitmapData!.setPixel(\r\n        this.dimension!.xAxis! - 2 + i,\r\n        this.h! - Math.floor(i / 2) - 1,\r\n        colorBorderRight\r\n      );\r\n    }\r\n\r\n    // X axis\r\n    for (\r\n      let k = this.dimension!.xAxis! / 2 - 1;\r\n      k < this.h! - this.dimension!.yAxis! / 2;\r\n      k += 1\r\n    ) {\r\n      this.bitmapData!.setPixel(this.w! - 1, k, colorBorderRight);\r\n    }\r\n\r\n    // Slot\r\n    for (let m = 0; m < this.dimension!.yAxis! * 2 - 2; m += 1) {\r\n      this.bitmapData!.setPixel(\r\n        Math.floor(m / 2),\r\n        this.dimension!.yAxis! * 2 - m - 3,\r\n        colorBorderLeft\r\n      );\r\n\r\n      this.bitmapData!.setPixel(\r\n        this.dimension!.xAxis! - 2 + Math.floor(m / 2),\r\n        this.h! - m - 1,\r\n        colorBorderLeft\r\n      );\r\n    }\r\n\r\n    // floodFill\r\n    this.bitmapData!.floodFill(\r\n      this.dimension!.yAxis! - 1,\r\n      1,\r\n      this.color!.leftSlope!\r\n    );\r\n\r\n    this.bitmapData!.floodFill(\r\n      this.dimension!.xAxis!,\r\n      this.h! - 3,\r\n      this.color!.right!\r\n    );\r\n\r\n    // Hack single pixel\r\n    this.bitmapData!.setPixel(\r\n      this.dimension!.xAxis! - 1,\r\n      this.h! - 2,\r\n      this.color!.right!\r\n    );\r\n\r\n    // Highlight\r\n    if (this.border) {\r\n      for (let n = 1; n < this.dimension!.yAxis! * 2 - 3; n += 1) {\r\n        this.bitmapData!.setPixel(\r\n          this.dimension!.xAxis! - 2 + Math.floor(n / 2),\r\n          this.h! - n - 1,\r\n          this.color!.borderHighlight!\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SlopeSouth]\";\r\n  }\r\n}\r\n","import { SlopeDimension, SideYDimension } from \"../dimensions\";\r\nimport { SlopeColor, SideColor } from \"../colors\";\r\nimport { Matrix } from \"../geom\";\r\nimport { BitmapData } from \"../display/BitmapData\";\r\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\r\nimport { SideY } from \"./SideY\";\r\n\r\nimport { PixelObject } from \"../display/PixelObject\";\r\n\r\nexport class SlopeWest extends AbstractPrimitive {\r\n  constructor(\r\n    dimension?: SlopeDimension,\r\n    color?: SlopeColor,\r\n    border?: boolean,\r\n    useDefaultCanvas?: boolean\r\n  ) {\r\n    super();\r\n\r\n    this.useDefaultCanvas = useDefaultCanvas || false;\r\n    this.border = border || border === undefined;\r\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\r\n    this.color = color === undefined ? new SlopeColor() : color;\r\n\r\n    this.initRectangle();\r\n    this.initBitmapData();\r\n    this.build();\r\n    this.renderBitmapDataForCanvas();\r\n  }\r\n\r\n  private initRectangle(): void {\r\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\r\n    this.h = (this.dimension!.xAxis! * 3) / 2 + this.dimension!.yAxis! / 2;\r\n\r\n    // 22.6 degrees implementation\r\n    this.w -= 2;\r\n    this.h -= 3;\r\n\r\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\r\n    this.matrix = new Matrix();\r\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\r\n    this.matrix.ty = -(this.dimension!.xAxis! - 2);\r\n  }\r\n\r\n  private initBitmapData(): void {\r\n    this.bitmapData = new BitmapData(\r\n      this.w!,\r\n      this.h!,\r\n      this.useDefaultCanvas || undefined\r\n    );\r\n  }\r\n\r\n  private renderBitmapDataForCanvas(): void {\r\n    this.canvas = this.bitmapData!.canvas;\r\n  }\r\n\r\n  private build(): void {\r\n    const colorBorderLeft = this.border\r\n      ? this.color!.border!\r\n      : this.color!.left!;\r\n    const colorBorderRight = this.border\r\n      ? this.color!.border!\r\n      : this.color!.right!;\r\n    const colorBorderHighlight = this.border\r\n      ? this.color!.borderHighlight!\r\n      : this.color!.left!;\r\n\r\n    const sideY = new SideY(\r\n      new SideYDimension(\r\n        this.dimension!.yAxis!,\r\n        this.h! - this.dimension!.yAxis! / 2\r\n      ),\r\n      new SideColor(colorBorderRight, this.color!.right!)\r\n    );\r\n\r\n    const poY = new PixelObject(sideY);\r\n\r\n    const ctx = this.bitmapData!.context!;\r\n    ctx.drawImage(\r\n      poY.canvas!,\r\n      poY.x! + this.w! - 2,\r\n      poY.y! + this.h! - this.dimension!.yAxis! / 2\r\n    );\r\n\r\n    const bmd = new BitmapData(this.w!, this.h!);\r\n\r\n    // Close the path for floodFill\r\n    for (\r\n      let i = this.h! - (this.dimension!.xAxis! * 3) / 2 + 2;\r\n      i < this.h!;\r\n      i += 1\r\n    ) {\r\n      bmd.setPixel(this.dimension!.xAxis! - 2, i, colorBorderLeft);\r\n    }\r\n\r\n    // X axis\r\n    for (let j = 0; j < this.dimension!.xAxis! - 1; j += 1) {\r\n      bmd.setPixel(\r\n        j,\r\n        this.dimension!.xAxis! +\r\n          this.dimension!.yAxis! / 2 -\r\n          3 +\r\n          Math.floor(j / 2),\r\n        colorBorderLeft\r\n      );\r\n\r\n      bmd.setPixel(\r\n        j,\r\n        this.dimension!.xAxis! + this.dimension!.yAxis! / 2 - 3 - j,\r\n        colorBorderLeft\r\n      );\r\n    }\r\n\r\n    // floodFill\r\n    bmd.floodFill(this.dimension!.xAxis! - 3, this.h! - 3, this.color!.left!);\r\n\r\n    // Highlight\r\n    for (let n = this.dimension!.yAxis! / 2; n < this.h! - 1; n += 1) {\r\n      bmd.setPixel(this.dimension!.xAxis! - 2, n, colorBorderHighlight);\r\n    }\r\n\r\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\r\n    ctx.drawImage(bmd.canvas!, 0, 0);\r\n  }\r\n\r\n  public static override toString(): string {\r\n    return \"[SlopeWest]\";\r\n  }\r\n}\r\n","import { Point } from \"../geom\";\r\nimport { PixelObject } from \"./PixelObject\";\r\n\r\nexport class PixelView {\r\n  public canvas: HTMLCanvasElement | null;\r\n\r\n  public context: CanvasRenderingContext2D | null;\r\n\r\n  public point: Point | null;\r\n\r\n  constructor(canvas?: HTMLCanvasElement, point?: Point) {\r\n    if (!canvas) {\r\n      throw new Error(\"Canvas is not defined\");\r\n    }\r\n\r\n    this.canvas = canvas;\r\n\r\n    this.context = this.canvas.getContext(\"2d\");\r\n    if (this.context) {\r\n      (this.context as any).mozImageSmoothingEnabled = false;\r\n      (this.context as any).msImageSmoothingEnabled = false;\r\n      this.context.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    this.point = point || new Point(0, 0);\r\n  }\r\n\r\n  public renderObject(\r\n    primitive: ConstructorParameters<typeof PixelObject>[0],\r\n    point3D: ConstructorParameters<typeof PixelObject>[1]\r\n  ): void {\r\n    const po = new PixelObject(primitive, point3D);\r\n\r\n    if (this.context && this.point && po.canvas) {\r\n      this.context.drawImage(\r\n        po.canvas,\r\n        this.point.x + (po.x || 0),\r\n        this.point.y + (po.y || 0)\r\n      );\r\n    }\r\n  }\r\n\r\n  public clear(): void {\r\n    if (this.canvas && this.context) {\r\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[PixelView]\";\r\n  }\r\n}\r\n","export abstract class CanvasTool {\r\n  public static getPixel(imageData: ImageData, x: number, y: number): number {\r\n    const { data } = imageData;\r\n    const index = (y * imageData.width + x) * 4;\r\n    const r = data[index]!;\r\n    const g = data[index + 1]!;\r\n    const b = data[index + 2]!;\r\n\r\n    // eslint-disable-next-line no-bitwise\r\n    return (r << 16) | (g << 8) | b;\r\n  }\r\n\r\n  public static toString() {\r\n    return \"[CanvasTool]\";\r\n  }\r\n}\r\n","export abstract class ColorPattern {\r\n  public GRASS_GREEN: number;\r\n\r\n  public YELLOW: number;\r\n\r\n  public WINE_RED: number;\r\n\r\n  public PINK: number;\r\n\r\n  public PURPLE: number;\r\n\r\n  public BLUE: number;\r\n\r\n  public GRAY: number;\r\n\r\n  public BLACK: number;\r\n\r\n  public FINE_COLORS: number[];\r\n\r\n  protected constructor() {\r\n    this.GRASS_GREEN = 0xccff00;\r\n    this.YELLOW = 0xffff00;\r\n    this.WINE_RED = 0xff0099;\r\n    this.PINK = 0xff7cbf;\r\n    this.PURPLE = 0xcc00ff;\r\n    this.BLUE = 0x00ccff;\r\n    this.GRAY = 0xeeeeee;\r\n    this.BLACK = 0x666666;\r\n\r\n    this.FINE_COLORS = [\r\n      this.GRASS_GREEN,\r\n      this.YELLOW,\r\n      this.WINE_RED,\r\n      this.PINK,\r\n      this.PURPLE,\r\n      this.BLUE,\r\n      this.GRAY,\r\n      this.BLACK,\r\n    ];\r\n  }\r\n\r\n  public getRandomComfortableColor(): number {\r\n    return this.FINE_COLORS[\r\n      Math.floor(Math.random() * this.FINE_COLORS.length)\r\n    ]!;\r\n  }\r\n\r\n  public static toString(): string {\r\n    return \"[ColorPattern]\";\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}