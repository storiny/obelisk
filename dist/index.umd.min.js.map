{"version":3,"file":"index.umd.min.js","sources":["../src/colors/AbstractColor.ts","../src/utils/ColorGeom.ts","../src/colors/CubeColor.ts","../src/colors/LineColor.ts","../src/colors/PyramidColor.ts","../src/colors/SideColor.ts","../src/colors/SlopeColor.ts","../src/dimensions/AbstractDimension.ts","../src/dimensions/BrickDimension.ts","../src/dimensions/CubeDimension.ts","../src/dimensions/LineXDimension.ts","../src/dimensions/LineYDimension.ts","../src/dimensions/LineZDimension.ts","../src/dimensions/PyramidDimension.ts","../src/dimensions/SideXDimension.ts","../src/dimensions/SideYDimension.ts","../src/dimensions/SlopeDimension.ts","../src/primitives/AbstractPrimitive.ts","../src/geom/Matrix.ts","../src/geom/Point.ts","../src/geom/Point3D.ts","../src/utils/CanvasManager.ts","../src/display/BitmapData.ts","../src/primitives/Brick.ts","../src/display/PixelObject.ts","../src/primitives/SideX.ts","../src/primitives/SideY.ts","../src/primitives/Cube.ts","../src/primitives/LineX.ts","../src/primitives/LineY.ts","../src/primitives/LineZ.ts","../src/primitives/Pyramid.ts","../src/primitives/SlopeEast.ts","../src/primitives/SlopeNorth.ts","../src/primitives/SlopeSouth.ts","../src/primitives/SlopeWest.ts","../src/display/PixelView.ts","../src/utils/CanvasTool.ts","../src/utils/ColorPattern.ts"],"sourcesContent":["export class AbstractColor {\n  /**\n   * The inner colors for elements of certain primitive\n   */\n  public inner: number | null;\n\n  /**\n   * The border colors for elements of certain primitive\n   */\n  public border: number | null;\n\n  /**\n   * The borderHighlight colors for elements of certain primitive\n   */\n  public borderHighlight: number | null;\n\n  /**\n   * The left side colors for elements of certain primitive\n   */\n  public left: number | null;\n\n  /**\n   * The right side colors for elements of certain primitive\n   */\n  public right: number | null;\n\n  /**\n   * The horizontal colors for elements of certain primitive\n   */\n  public horizontal: number | null;\n\n  /**\n   * The left slot side colors for elements of certain primitive\n   */\n  public leftSlope: number | null;\n\n  /**\n   * The right slot side colors for elements of certain primitive\n   */\n  public rightSlope: number | null;\n\n  constructor({\n    inner = null,\n    left = null,\n    right = null,\n    border = null,\n    borderHighlight = null,\n    horizontal = null,\n    leftSlope = null,\n    rightSlope = null,\n  }: {\n    inner?: number | null;\n    left?: number | null;\n    right?: number | null;\n    border?: number | null;\n    borderHighlight?: number | null;\n    horizontal?: number | null;\n    leftSlope?: number | null;\n    rightSlope?: number | null;\n  } = {}) {\n    this.inner = inner;\n    this.left = left;\n    this.right = right;\n    this.border = border;\n    this.borderHighlight = borderHighlight;\n    this.horizontal = horizontal;\n    this.leftSlope = leftSlope;\n    this.rightSlope = rightSlope;\n  }\n\n  public static toString(): string {\n    return \"[AbstractColor]\";\n  }\n}\n","ï»¿/* eslint-disable no-bitwise */\n\nexport abstract class ColorGeom {\n  public static get32(color: number): number {\n    return color < 0xff000000 ? color + 0xff000000 : color;\n  }\n\n  public static applyBrightness(\n    color: number,\n    brightness: number,\n    highlight?: boolean\n  ): number {\n    let r;\n    let g;\n    let b;\n    let y;\n\n    const a = (color >>> 24) & 0x000000ff;\n    r = (color >>> 16) & 0x000000ff;\n    g = (color >>> 8) & 0x000000ff;\n    b = color & 0x000000ff;\n\n    y = ((r * 313524) >> 20) + ((g * 615514) >> 20) + ((b * 119538) >> 20);\n    const u =\n      -((155189 * r) >> 20) - ((303038 * g) >> 20) + ((458227 * b) >> 20);\n    const v =\n      ((644874 * r) >> 20) - ((540016 * g) >> 20) - ((104857 * b) >> 20);\n\n    if (!highlight) {\n      y += brightness;\n    } else {\n      y = 60 + y ** 1.2;\n    }\n\n    r = y + ((1195376 * v) >> 20);\n    g = y - ((408944 * u) >> 20) - ((608174 * v) >> 20);\n    b = y + ((2128609 * u) >> 20);\n\n    r = Math.max(0, Math.min(r, 255));\n    g = Math.max(0, Math.min(g, 255));\n    b = Math.max(0, Math.min(b, 255));\n\n    return (a << 24) | (r << 16) | (g << 8) | b;\n  }\n}\n\nColorGeom.toString = () => \"[ColorGeom]\";\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class CubeColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(\n    border?: number,\n    borderHighlight?: number,\n    left?: number,\n    right?: number,\n    horizontal?: number\n  ) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\n    this.borderHighlight = ColorGeom.get32(\n      borderHighlight === undefined ? 0xffffff : borderHighlight\n    );\n    this.left = ColorGeom.get32(left === undefined ? 0xc9cfd0 : left);\n    this.right = ColorGeom.get32(right === undefined ? 0xe3e3e3 : right);\n    this.horizontal = ColorGeom.get32(\n      horizontal === undefined ? 0xeeeff0 : horizontal\n    );\n  }\n\n  public getByHorizontalColor(horizontal: number): CubeColor {\n    return new CubeColor(\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 4),\n      // Apply highlight\n      ColorGeom.applyBrightness(horizontal, 0, true),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 2),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain),\n      horizontal\n    );\n  }\n\n  public static override toString(): string {\n    return \"[CubeColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class LineColor extends AbstractColor {\n  constructor(border?: number, inner?: number) {\n    super({ border: border || null, inner: inner || null });\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\n  }\n\n  public static override toString(): string {\n    return \"[LineColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class PyramidColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(\n    border?: number,\n    borderHighlight?: number,\n    left?: number,\n    right?: number\n  ) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x949698 : border);\n    this.borderHighlight = ColorGeom.get32(\n      borderHighlight === undefined ? 0xffffff : borderHighlight\n    );\n    this.left = ColorGeom.get32(left === undefined ? 0xe6e8e9 : left);\n    this.right = ColorGeom.get32(right === undefined ? 0xeeeff0 : right);\n  }\n\n  public getByRightColor(right: number): PyramidColor {\n    return new PyramidColor(\n      ColorGeom.applyBrightness(right, this.brightnessGain * 4),\n      // Apply highlight\n      ColorGeom.applyBrightness(right, 0, true),\n      ColorGeom.applyBrightness(right, this.brightnessGain),\n      right\n    );\n  }\n\n  public static override toString(): string {\n    return \"[PyramidColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class SideColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(border?: number, inner?: number) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x878787 : border);\n    this.inner = ColorGeom.get32(inner === undefined ? 0xeeeeee : inner);\n  }\n\n  public getByInnerColor(inner: number): SideColor {\n    return new SideColor(\n      ColorGeom.applyBrightness(inner, this.brightnessGain * 4),\n      inner\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SideColor]\";\n  }\n}\n","import { AbstractColor } from \"./AbstractColor\";\nimport { ColorGeom } from \"../utils/ColorGeom\";\n\nexport class SlopeColor extends AbstractColor {\n  public brightnessGain = -20;\n\n  constructor(\n    border?: number,\n    borderHighlight?: number,\n    left?: number,\n    right?: number,\n    leftSlope?: number,\n    rightSlope?: number\n  ) {\n    super();\n    this.border = ColorGeom.get32(border === undefined ? 0x949698 : border);\n    this.borderHighlight = ColorGeom.get32(\n      borderHighlight === undefined ? 0xffffff : borderHighlight\n    );\n    this.left = ColorGeom.get32(left === undefined ? 0xc9cfd0 : left);\n    this.right = ColorGeom.get32(right === undefined ? 0xe6e8e9 : right);\n    this.leftSlope = ColorGeom.get32(\n      leftSlope === undefined ? 0xdbdbdb : leftSlope\n    );\n    this.rightSlope = ColorGeom.get32(\n      rightSlope === undefined ? 0xdbdbdb : rightSlope\n    );\n  }\n\n  /*\n   * Horizontal side doesn't actually exist in the Slope primitive.\n   * You can assign the same horizontal color as cube\n   * so that you will be able to arrange the slope with cube\n   */\n  public getByHorizontalColor(horizontal: number): SlopeColor {\n    return new SlopeColor(\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 4),\n      // Apply highlight\n      ColorGeom.applyBrightness(horizontal, 0, true),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 2),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 1.5),\n      ColorGeom.applyBrightness(horizontal, this.brightnessGain * 0.5)\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SlopeColor]\";\n  }\n}\n","export class AbstractDimension {\n  /**\n   * The x Axis dimensions in 22.6 degrees coordinate\n   */\n  public xAxis: number | null;\n\n  /**\n   * The y Axis dimensions in 22.6 degrees coordinate\n   */\n  public yAxis: number | null;\n\n  /**\n   * The z Axis dimensions in 22.6 degrees coordinate\n   */\n  public zAxis: number | null;\n\n  /**\n   * Pyramid tall mode\n   */\n  public tall: boolean;\n\n  constructor({\n    xAxis = null,\n    yAxis = null,\n    zAxis = null,\n    tall = false,\n  }: {\n    xAxis?: number | null;\n    yAxis?: number | null;\n    zAxis?: number | null;\n    tall?: boolean;\n  } = {}) {\n    this.xAxis = xAxis;\n    this.yAxis = yAxis;\n    this.zAxis = zAxis;\n    this.tall = tall;\n  }\n\n  public static toString(): string {\n    return \"[AbstractDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class BrickDimension extends AbstractDimension {\n  constructor(xAxis?: number, yAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.yAxis = yAxis || 30;\n\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\n      throw new Error(\"xAxis / yAxis must be an even number\");\n    }\n\n    // If xAxis or yAxis = 4 then floodFill can not be applied\n    if (this.xAxis <= 4 || this.yAxis <= 4) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[BrickDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class CubeDimension extends AbstractDimension {\n  constructor(xAxis?: number, yAxis?: number, zAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.yAxis = yAxis || 30;\n    this.zAxis = zAxis || 30;\n\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\n      throw new Error(\"xAxis / yAxis must be an even number\");\n    }\n\n    // If axis = 4 then floodFill can not be applied\n    if (this.xAxis <= 4 || this.yAxis <= 4 || this.zAxis <= 2) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[CubeDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class LineXDimension extends AbstractDimension {\n  constructor(xAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n\n    if (this.xAxis % 2 === 1) {\n      throw new Error(\"xAxis must be an even number\");\n    }\n\n    if (this.xAxis < 2) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineXDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class LineYDimension extends AbstractDimension {\n  constructor(yAxis?: number) {\n    super();\n    this.yAxis = yAxis || 30;\n\n    if (this.yAxis % 2 === 1) {\n      throw new Error(\"yAxis must be an even number\");\n    }\n\n    if (this.yAxis < 2) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineYDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class LineZDimension extends AbstractDimension {\n  constructor(zAxis?: number) {\n    super();\n    this.zAxis = zAxis || 30;\n\n    if (this.zAxis <= 0) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineZDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class PyramidDimension extends AbstractDimension {\n  constructor(axis?: number, tall?: boolean) {\n    super();\n    this.xAxis = axis || 30;\n    this.yAxis = axis || 30;\n    this.tall = tall || false;\n\n    if (this.xAxis % 2 === 1) {\n      throw new Error(\"Axis must be an even number\");\n    }\n\n    if (this.xAxis <= 4) {\n      throw new Error(\"Dimension is too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[PyramidDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class SideXDimension extends AbstractDimension {\n  constructor(xAxis?: number, zAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.zAxis = zAxis || 30;\n\n    if (this.xAxis % 2 === 1) {\n      throw new Error(\"xAxis must be an even number\");\n    }\n\n    // If xAxis or zAxis = 4 floodFill cannot be applied\n    if (this.xAxis <= 4 || this.zAxis <= 2) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SideXDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class SideYDimension extends AbstractDimension {\n  constructor(yAxis?: number, zAxis?: number) {\n    super();\n    this.yAxis = yAxis || 30;\n    this.zAxis = zAxis || 30;\n\n    if (this.yAxis % 2 === 1) {\n      throw new Error(\"yAxis must be an even number\");\n    }\n\n    // If yAxis or zAxis = 4 floodFill cannot be applied\n    if (this.yAxis <= 4 || this.zAxis <= 2) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SideYDimension]\";\n  }\n}\n","import { AbstractDimension } from \"./AbstractDimension\";\n\nexport class SlopeDimension extends AbstractDimension {\n  constructor(xAxis?: number, yAxis?: number) {\n    super();\n    this.xAxis = xAxis || 30;\n    this.yAxis = yAxis || 30;\n\n    if (this.xAxis % 2 === 1 || this.yAxis % 2 === 1) {\n      throw new Error(\"xAxis and yAxis must be even numbers\");\n    }\n\n    if (this.xAxis <= 4 || this.yAxis <= 4) {\n      throw new Error(\"Dimensions are too small\");\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SlopeDimension]\";\n  }\n}\n","import type { Dimension } from \"../dimensions\";\nimport type { Color } from \"../colors\";\nimport type { BitmapData } from \"../display/BitmapData\";\nimport type { Matrix } from \"../geom\";\n\nexport class AbstractPrimitive {\n  /**\n   * The canvas for drawImage\n   */\n  public canvas: HTMLCanvasElement | null;\n\n  /**\n   * The width of the bitmap in 2d flash coordinate\n   */\n  protected w: number | null;\n\n  /**\n   * The height of the bitmap in 2d flash coordinate\n   */\n  protected h: number | null;\n\n  /**\n   * The dimension of primitive in 3d pixel coordinate\n   */\n  protected dimension: Dimension | null;\n\n  /**\n   * The color obj of the primitive\n   */\n  protected color: Color | null;\n\n  /**\n   * The border option of the primitive\n   */\n  protected border: boolean | null;\n\n  /**\n   * The source bitmapData containing pixel graphic\n   */\n  protected bitmapData: BitmapData | null;\n\n  /**\n   * The preserve canvas option\n   */\n  protected useDefaultCanvas: boolean | null;\n\n  /**\n   * The matrix offset between the bitmap and the 3d pixel coordinate zero point\n   */\n  protected matrix: Matrix | null;\n\n  constructor({\n    canvas = null,\n    w = null,\n    h = null,\n    dimension = null,\n    color = null,\n    border = null,\n    bitmapData = null,\n    useDefaultCanvas = null,\n    matrix = null,\n  }: {\n    canvas?: HTMLCanvasElement | null;\n    w?: number | null;\n    h?: number | null;\n    dimension?: Dimension | null;\n    color?: Color | null;\n    border?: boolean | null;\n    bitmapData?: BitmapData | null;\n    useDefaultCanvas?: boolean | null;\n    matrix?: Matrix | null;\n  } = {}) {\n    this.canvas = canvas;\n    this.w = w;\n    this.h = h;\n    this.dimension = dimension;\n    this.color = color;\n    this.border = border;\n    this.bitmapData = bitmapData;\n    this.useDefaultCanvas = useDefaultCanvas;\n    this.matrix = matrix;\n  }\n\n  public static toString(): string {\n    return \"[AbstractPrimitive]\";\n  }\n}\n","export class Matrix {\n  /**\n   * Position (0, 0) in a 3x3 matrix.\n   * */\n  public a: number;\n\n  /**\n   * Position (0, 1) in a 3x3 matrix.\n   * */\n  public b: number;\n\n  /**\n   * Position (1, 0) in a 3x3 matrix.\n   * */\n  public c: number;\n\n  /**\n   * Position (1, 1) in a 3x3 matrix.\n   * */\n  public d: number;\n\n  /**\n   * Position (2, 0) in a 3x3 matrix.\n   * */\n  public tx: number;\n\n  /**\n   * Position (2, 1) in a 3x3 matrix.\n   * */\n  public ty: number;\n\n  constructor(\n    a?: number,\n    b?: number,\n    c?: number,\n    d?: number,\n    tx?: number,\n    ty?: number\n  ) {\n    this.a = a === undefined ? 1 : a;\n    this.b = b || 0;\n    this.c = c || 0;\n    this.d = d === undefined ? 1 : d;\n    this.tx = tx || 0;\n    this.ty = ty || 0;\n  }\n\n  public static toString(): string {\n    return \"[Matrix]\";\n  }\n}\n","export class Point {\n  public x: number;\n\n  public y: number;\n\n  constructor(x?: number, y?: number) {\n    this.x = x === undefined ? 0 : x;\n    this.y = y === undefined ? 0 : y;\n  }\n\n  public toString(): string {\n    return `[Point x: ${this.x}, y: ${this.y}]`;\n  }\n}\n","import { Point } from \"./Point\";\n\nexport class Point3D {\n  public x: number;\n\n  public y: number;\n\n  public z: number;\n\n  constructor(x?: number, y?: number, z?: number) {\n    this.x = x === undefined ? 0 : x;\n    this.y = y === undefined ? 0 : y;\n    this.z = z === undefined ? 0 : z;\n  }\n\n  public toGlobalCoordinates(offset?: { x: number; y: number }): Point {\n    const p2D = new Point(\n      this.x - this.y,\n      Math.floor(this.x / 2 + this.y / 2) - this.z\n    );\n\n    if (offset !== undefined) {\n      p2D.x += offset.x;\n      p2D.y += offset.y;\n    }\n\n    return p2D;\n  }\n\n  public toString(): string {\n    return `[Point3D x : ${this.x}, y : ${this.y}, z: ${this.z}]`;\n  }\n}\n","export abstract class CanvasManager {\n  public static defaultCanvas: HTMLCanvasElement | null;\n\n  public static getDefaultCanvas(): HTMLCanvasElement | null {\n    this.defaultCanvas = this.defaultCanvas || document.createElement(\"canvas\");\n    return this.defaultCanvas;\n  }\n\n  public static getNewCanvas(): HTMLCanvasElement {\n    return document.createElement(\"canvas\");\n  }\n\n  public static toString(): string {\n    return \"[CanvasManager]\";\n  }\n}\n","/* eslint-disable no-bitwise */\n\nimport { CanvasManager } from \"../utils/CanvasManager\";\n\nexport class BitmapData {\n  public imageData: ImageData | null;\n\n  public canvas: HTMLCanvasElement | null;\n\n  public context: CanvasRenderingContext2D | null;\n\n  constructor(w?: number, h?: number, useDefaultCanvas?: boolean) {\n    if (w === undefined || h === undefined) {\n      throw new Error(\"BitmapData width or height is missing\");\n    }\n\n    if (useDefaultCanvas) {\n      this.canvas = CanvasManager.getDefaultCanvas();\n    } else {\n      this.canvas = CanvasManager.getNewCanvas();\n    }\n\n    this.imageData = null;\n    this.context = null;\n\n    if (this.canvas) {\n      this.canvas.setAttribute(\"width\", w.toString());\n      this.canvas.setAttribute(\"height\", h.toString());\n\n      this.context = this.canvas.getContext(\"2d\") || null;\n\n      if (this.context) {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        (this.context as any).mozImageSmoothingEnabled = false;\n        (this.context as any).msImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n\n        this.imageData = this.context.createImageData(w, h);\n      }\n    }\n  }\n\n  public setPixel(posX: number, posY: number, color: number): void {\n    if (this.imageData) {\n      const index = (posY * this.imageData.width + posX) * 4;\n      this.setPixelByIndex(index, color);\n    }\n  }\n\n  public setPixelByIndex(index: number, color: number): void {\n    if (this.imageData) {\n      const pixels = this.imageData.data;\n\n      pixels[index] = (color >>> 16) & 0xff;\n      pixels[index + 1] = (color >>> 8) & 0xff;\n      pixels[index + 2] = (color >>> 0) & 0xff;\n      pixels[index + 3] = (color >>> 24) & 0xff;\n    }\n  }\n\n  public checkPixelAvailable(x: number, y: number): boolean {\n    if (this.imageData) {\n      const index = (y * this.imageData.width + x) * 4;\n      return this.imageData.data[index + 3] === 0;\n    }\n\n    return false;\n  }\n\n  public floodFill(posX: number, posY: number, color: number): void {\n    if (((color >>> 24) & 0xff) === 0x00 || !this.imageData) {\n      // Transparent flood fill\n      return;\n    }\n\n    let x = posX;\n    let y = posY;\n\n    const stack: number[] = [];\n    let nowCol: number[] = [];\n    let prevCol: number[] = [];\n\n    let col: number;\n    let row: number;\n    let matchFlag: boolean;\n    let newStart: number;\n\n    const w = this.imageData.width;\n    const h = this.imageData.height;\n\n    let i: number;\n    let j: number;\n\n    // Bound reach\n    if (x < 0 || y < 0 || x >= w || y >= h) {\n      return;\n    }\n\n    // First point check fail\n    if (!this.checkPixelAvailable(x, y)) {\n      throw new Error(\"Start point for flood fill is already filled\");\n    }\n\n    // Left side flood fill\n    for (col = x; col >= 0; col -= 1) {\n      // Top side\n      for (row = y; row >= 0; row -= 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel and not at col top\n          if (row === y && this.checkPixelAvailable(col + 1, row - 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row - 1)) {\n              newStart = row - 1;\n            } else if (this.checkPixelAvailable(col + 1, row - 2)) {\n              newStart = row - 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = -1;\n            }\n\n            for (row = newStart; row >= 0; row -= 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // Available pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Bottom side\n      for (row = y; row < h; row += 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel and not at col bottom\n          if (row === y && this.checkPixelAvailable(col + 1, row + 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row + 1)) {\n              newStart = row + 1;\n            } else if (this.checkPixelAvailable(col + 1, row + 2)) {\n              newStart = row + 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = h;\n            }\n\n            for (row = newStart; row < h; row += 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // AAvailable pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Compare with previous column\n      // for first column,\n      // the given point should be inside the container\n      if (col === x) {\n        prevCol = nowCol.concat();\n      }\n\n      matchFlag = false;\n\n      for (i = 0; i < prevCol.length; i += 1) {\n        for (j = 0; j < prevCol.length; j += 1) {\n          if (nowCol[j] === prevCol[i]) {\n            matchFlag = true;\n            y = prevCol[i]!;\n            break;\n          }\n        }\n\n        if (matchFlag) {\n          break;\n        }\n      }\n\n      if (matchFlag) {\n        prevCol = nowCol.concat();\n        nowCol = [];\n      } else {\n        // Bound reach\n        break;\n      }\n    }\n\n    // Reset start point\n    x = posX;\n    y = posY;\n    prevCol = [];\n    nowCol = [];\n\n    // Right side flood fill\n    for (col = x; col < w; col += 1) {\n      // Top side\n      for (row = y; row >= 0; row -= 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel and not at col top\n          if (row === y && this.checkPixelAvailable(col - 1, row - 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row - 1)) {\n              newStart = row - 1;\n            } else if (this.checkPixelAvailable(col - 1, row - 2)) {\n              newStart = row - 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = -1;\n            }\n\n            for (row = newStart; row >= 0; row -= 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // Available pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Bottom side\n      for (row = y; row < h; row += 1) {\n        if (this.checkPixelAvailable(col, row)) {\n          // Available pixel\n          stack.push((row * w + col) * 4);\n          nowCol.push(row);\n        } else {\n          // First one is invalid pixel && not at col bottom\n          if (row === y && this.checkPixelAvailable(col - 1, row + 1)) {\n            // Next one is valid\n            if (this.checkPixelAvailable(col, row + 1)) {\n              newStart = row + 1;\n            } else if (this.checkPixelAvailable(col - 1, row + 2)) {\n              newStart = row + 2;\n            } else {\n              // Fail, assign max value to avoid loop below\n              newStart = h;\n            }\n\n            for (row = newStart; row < h; row += 1) {\n              if (this.checkPixelAvailable(col, row)) {\n                // Available pixel\n                stack.push((row * w + col) * 4);\n                nowCol.push(row);\n              } else {\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n      }\n\n      // Compare with previous column\n      // for first column,\n      // the given point should be inside the container\n      if (col === x) {\n        prevCol = nowCol.concat();\n      }\n\n      matchFlag = false;\n\n      for (i = 0; i < prevCol.length; i += 1) {\n        for (j = 0; j < prevCol.length; j += 1) {\n          if (nowCol[j] === prevCol[i]) {\n            matchFlag = true;\n            y = prevCol[i]!;\n            break;\n          }\n        }\n\n        if (matchFlag) {\n          break;\n        }\n      }\n\n      if (matchFlag) {\n        prevCol = nowCol.concat();\n        nowCol = [];\n      } else {\n        // Bound reach\n        break;\n      }\n    }\n\n    // Fill image data\n    for (i = 0; i < stack.length; i += 1) {\n      this.setPixelByIndex(stack[i]!, color);\n    }\n  }\n\n  public static toString(): string {\n    return \"[BitmapData]\";\n  }\n}\n","import { BrickDimension } from \"../dimensions\";\nimport { SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class Brick extends AbstractPrimitive {\n  constructor(\n    dimension?: BrickDimension,\n    color?: SideColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new BrickDimension() : dimension;\n    this.color = color === undefined ? new SideColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 1;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate ZERO point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = 0;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetInner = this.dimension!.yAxis! - 2;\n    const yOffsetInner = 0;\n    const xOffsetOut = this.dimension!.xAxis! - 1;\n    const yOffsetOut = (this.h || 0) - 1;\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + i,\n        yOffsetInner + Math.floor(i / 2),\n        borderColor\n      );\n\n      this.bitmapData!.setPixel(\n        xOffsetOut - i,\n        yOffsetOut - Math.floor(i / 2),\n        borderColor\n      );\n    }\n\n    // Y axis\n    for (let j = 0; j < this.dimension!.yAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + 1 - j,\n        yOffsetInner + Math.floor(j / 2),\n        borderColor\n      );\n\n      this.bitmapData!.setPixel(\n        xOffsetOut - 1 + j,\n        yOffsetOut - Math.floor(j / 2),\n        borderColor\n      );\n    }\n\n    // Fill a pixel graphic enclosed\n    this.bitmapData!.floodFill(\n      Math.floor(this.w! / 2),\n      Math.floor(this.h! / 2),\n      this.color!.inner!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[Brick]\";\n  }\n}\n","import { Point3D } from \"../geom\";\nimport type { AbstractPrimitive } from \"../primitives\";\n\nexport class PixelObject {\n  public x: number | null;\n\n  public y: number | null;\n\n  public canvas: HTMLCanvasElement | null;\n\n  constructor(primitive?: AbstractPrimitive, point3D?: Point3D) {\n    if (!primitive) {\n      throw new Error(\"Primitive is not defined\");\n    }\n\n    const p3D = point3D || new Point3D();\n\n    this.canvas = primitive.canvas;\n    this.x = (primitive as any).matrix!.tx + p3D.x - p3D.y;\n    this.y =\n      (primitive as any).matrix!.ty + Math.floor(p3D.x / 2 + p3D.y / 2) - p3D.z;\n  }\n\n  public static toString(): string {\n    return \"[PixelObject]\";\n  }\n}\n","import { SideXDimension } from \"../dimensions\";\nimport { SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SideX extends AbstractPrimitive {\n  constructor(\n    dimension?: SideXDimension,\n    color?: SideColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SideXDimension() : dimension;\n    this.color = color === undefined ? new SideColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis;\n    this.h = this.dimension!.zAxis! + this.dimension!.xAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = 0;\n    this.matrix.ty = -this.dimension!.zAxis!;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetInner = 0;\n    const yOffsetInner = this.dimension!.zAxis!;\n    const xOffsetOut = this.dimension!.xAxis! - 1;\n    const yOffsetOut = this.h! - this.dimension!.zAxis! - 1;\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + i,\n        yOffsetInner + Math.floor(i / 2),\n        borderColor\n      );\n      this.bitmapData!.setPixel(\n        xOffsetOut - i,\n        yOffsetOut - Math.floor(i / 2),\n        borderColor\n      );\n    }\n\n    // Z axis\n    for (let j = 0; j < this.dimension!.zAxis!; j += 1) {\n      this.bitmapData!.setPixel(xOffsetInner, yOffsetInner - j, borderColor);\n      this.bitmapData!.setPixel(xOffsetOut, yOffsetOut + j, borderColor);\n    }\n\n    // fill an pixel graphic enclosed\n    this.bitmapData!.floodFill(\n      Math.floor(this.w! / 2),\n      Math.floor(this.h! / 2),\n      this.color!.inner!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SideX]\";\n  }\n}\n","import { SideYDimension } from \"../dimensions\";\nimport { SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SideY extends AbstractPrimitive {\n  constructor(\n    dimension?: SideYDimension,\n    color?: SideColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SideYDimension() : dimension;\n    this.color = color === undefined ? new SideColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.yAxis!;\n    this.h = this.dimension!.zAxis! + this.dimension!.yAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = -this.dimension!.zAxis!;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetInner = 0;\n    const yOffsetInner = this.h! - this.dimension!.zAxis! - 1;\n    const xOffsetOut = this.dimension!.yAxis! - 1;\n    const yOffsetOut = this.dimension!.zAxis!;\n    const borderColor = this.border ? this.color!.border! : this.color!.inner!;\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetInner + i,\n        yOffsetInner - Math.floor(i / 2),\n        borderColor\n      );\n\n      this.bitmapData!.setPixel(\n        xOffsetOut - i,\n        yOffsetOut + Math.floor(i / 2),\n        borderColor\n      );\n    }\n\n    // Z axis\n    for (let j = 0; j < this.dimension!.zAxis!; j += 1) {\n      this.bitmapData!.setPixel(xOffsetInner, yOffsetInner + j, borderColor);\n      this.bitmapData!.setPixel(xOffsetOut, yOffsetOut - j, borderColor);\n    }\n\n    // Fill a pixel graphic enclosed\n    this.bitmapData!.floodFill(\n      Math.floor(this.w! / 2),\n      Math.floor(this.h! / 2),\n      this.color!.inner!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[SideY]\";\n  }\n}\n","import {\n  CubeDimension,\n  BrickDimension,\n  SideYDimension,\n  SideXDimension,\n} from \"../dimensions\";\nimport { CubeColor, SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { PixelObject } from \"../display/PixelObject\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\nimport { Brick } from \"./Brick\";\nimport { SideX } from \"./SideX\";\nimport { SideY } from \"./SideY\";\n\nexport class Cube extends AbstractPrimitive {\n  constructor(\n    dimension?: CubeDimension,\n    color?: CubeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new CubeDimension() : dimension;\n    this.color = color === undefined ? new CubeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h =\n      this.dimension!.zAxis! +\n      (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 1;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = -this.dimension!.zAxis!;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    let offsetX: number;\n    let offsetY: number;\n\n    // Horizontal layer\n    const brick = new Brick(\n      new BrickDimension(this.dimension!.xAxis!, this.dimension!.yAxis!),\n      new SideColor(this.color!.border!, this.color!.horizontal!),\n      this.border!\n    );\n\n    // Left side\n    const sideX = new SideX(\n      new SideXDimension(this.dimension!.xAxis!, this.dimension!.zAxis!),\n      new SideColor(this.color!.border!, this.color!.left!),\n      this.border!\n    );\n\n    // Right side\n    const sideY = new SideY(\n      new SideYDimension(this.dimension!.yAxis!, this.dimension!.zAxis!),\n      new SideColor(this.color!.border!, this.color!.right!),\n      this.border!\n    );\n\n    const poBrick = new PixelObject(brick);\n    const poX = new PixelObject(sideX);\n    const poY = new PixelObject(sideY);\n\n    const ctx = this.bitmapData!.context!;\n\n    ctx.drawImage(\n      poBrick.canvas!,\n      poBrick.x! + this.dimension!.yAxis! - 2,\n      poBrick.y!\n    );\n\n    ctx.drawImage(\n      poX.canvas!,\n      poX.x!,\n      poX.y! + this.dimension!.zAxis! + this.dimension!.yAxis! / 2 - 1\n    );\n\n    ctx.drawImage(\n      poY.canvas!,\n      poY.x! + this.w! - 2,\n      poX.y! + this.dimension!.zAxis! + this.dimension!.xAxis! / 2 - 1\n    );\n\n    // Highlight & highlight fix\n    const bmd = new BitmapData(this.w!, this.h!);\n\n    if (this.border) {\n      offsetX = this.dimension!.xAxis! - 2;\n      offsetY = (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2 - 2;\n\n      // The 2px in bounding without highlight\n      for (let i = 0; i < this.dimension!.xAxis! - 2; i += 1) {\n        bmd.setPixel(\n          offsetX + 1 - i,\n          offsetY - Math.floor(i / 2),\n          this.color!.borderHighlight!\n        );\n      }\n\n      // the 2px in bounding without highlight\n      for (let j = 0; j < this.dimension!.yAxis! - 2; j += 1) {\n        bmd.setPixel(\n          offsetX + j,\n          offsetY - Math.floor(j / 2),\n          this.color!.borderHighlight!\n        );\n      }\n\n      for (let k = 0; k < this.dimension!.zAxis!; k += 1) {\n        bmd.setPixel(offsetX, offsetY + k, this.color!.borderHighlight!);\n      }\n    } else {\n      for (let i = 0; i < this.dimension!.zAxis!; i += 1) {\n        bmd.setPixel(\n          this.dimension!.xAxis! - 2,\n          (this.dimension!.xAxis! + this.dimension!.yAxis!) / 2 - 1 + i,\n          this.color!.left!\n        );\n      }\n    }\n\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\n    ctx.drawImage(bmd.canvas!, 0, 0);\n  }\n\n  public static override toString(): string {\n    return \"[Cube]\";\n  }\n}\n","import { LineXDimension } from \"../dimensions\";\nimport { LineColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class LineX extends AbstractPrimitive {\n  constructor(\n    dimension?: LineXDimension,\n    color?: LineColor,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.dimension = dimension === undefined ? new LineXDimension() : dimension;\n    this.color = color === undefined ? new LineColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis!;\n    this.h = this.dimension!.xAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = 0;\n    this.matrix.ty = 0;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetBorder = 0;\n    const yOffsetBorder = 0;\n    const borderColor = this.color!.border!;\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetBorder + i,\n        yOffsetBorder + Math.floor(i / 2),\n        borderColor\n      );\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineX]\";\n  }\n}\n","import { LineYDimension } from \"../dimensions\";\nimport { LineColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class LineY extends AbstractPrimitive {\n  constructor(\n    dimension?: LineYDimension,\n    color?: LineColor,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.dimension = dimension === undefined ? new LineYDimension() : dimension;\n    this.color = color === undefined ? new LineColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.yAxis!;\n    this.h = this.dimension!.yAxis! / 2;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.yAxis! + 2;\n    this.matrix.ty = 0;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetBorder = this.dimension!.yAxis! - 1;\n    const yOffsetBorder = 0;\n    const borderColor = this.color!.border!;\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        xOffsetBorder - i,\n        yOffsetBorder + Math.floor(i / 2),\n        borderColor\n      );\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineY]\";\n  }\n}\n","import { LineZDimension } from \"../dimensions\";\nimport { LineColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class LineZ extends AbstractPrimitive {\n  constructor(\n    dimension?: LineZDimension,\n    color?: LineColor,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.dimension = dimension === undefined ? new LineZDimension() : dimension;\n    this.color = color === undefined ? new LineColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = 1;\n    this.h = this.dimension!.zAxis!;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = 0;\n    this.matrix.ty = -this.dimension!.zAxis! + 1;\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const xOffsetBorder = 0;\n    const yOffsetBorder = 0;\n    const borderColor = this.color!.border!;\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.zAxis!; i += 1) {\n      this.bitmapData!.setPixel(xOffsetBorder, yOffsetBorder + i, borderColor);\n    }\n  }\n\n  public static override toString(): string {\n    return \"[LineZ]\";\n  }\n}\n","import { PyramidDimension } from \"../dimensions\";\nimport { PyramidColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class Pyramid extends AbstractPrimitive {\n  private readonly hSize: number;\n\n  private readonly hOffset: number;\n\n  constructor(\n    dimension?: PyramidDimension,\n    color?: PyramidColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension =\n      dimension === undefined ? new PyramidDimension() : dimension;\n    this.color = color === undefined ? new PyramidColor() : color;\n\n    this.hSize = this.dimension.tall\n      ? this.dimension!.xAxis! * 2\n      : this.dimension!.xAxis!;\n    this.hOffset = this.dimension.tall ? -3 : -2;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = this.hSize + this.dimension!.xAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h += this.hOffset;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -this.dimension!.xAxis! + 2;\n    this.matrix.ty =\n      -this.hSize / 2 +\n      2 -\n      (this.dimension!.tall ? this.dimension!.xAxis! / 2 : 1);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n\n    const colorBorderHighlight = this.border\n      ? this.color!.borderHighlight!\n      : colorBorderLeft;\n\n    // Z axis highlight\n    for (let k = 0; k < this.hSize + this.dimension!.xAxis! / 2 - 4; k += 1) {\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2,\n        k + 3 + this.hOffset,\n        colorBorderHighlight\n      );\n    }\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        i,\n        this.hSize + Math.floor(i / 2) + this.hOffset,\n        colorBorderLeft\n      );\n    }\n\n    // Y axis\n    for (let j = 0; j < this.dimension!.xAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        j + this.dimension!.xAxis! - 2,\n        this.hSize +\n          this.dimension!.xAxis! / 2 -\n          Math.floor(j / 2) -\n          1 +\n          this.hOffset,\n        colorBorderRight\n      );\n    }\n\n    if (!this.dimension!.tall) {\n      // Left edge\n      for (let l = 0; l < this.hSize; l += 1) {\n        this.bitmapData!.setPixel(\n          l,\n          this.hSize - l + this.hOffset,\n          colorBorderLeft\n        );\n      }\n\n      // Right edge\n      for (let m = 0; m < this.hSize; m += 1) {\n        this.bitmapData!.setPixel(\n          m + this.hSize - 2,\n          m + 1 + this.hOffset,\n          colorBorderRight\n        );\n      }\n    } else {\n      // Left edge\n      for (let l = 0; l < this.hSize - 2; l += 1) {\n        this.bitmapData!.setPixel(\n          Math.floor(l / 2),\n          this.hSize - l + this.hOffset,\n          colorBorderLeft\n        );\n      }\n\n      // Right edge\n      for (let m = 2; m < this.hSize; m += 1) {\n        this.bitmapData!.setPixel(\n          Math.floor(m / 2) + this.dimension!.xAxis! - 2,\n          m + 1 + this.hOffset,\n          colorBorderRight\n        );\n      }\n    }\n\n    if (!this.border) {\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2,\n        this.hSize + this.dimension!.xAxis! / 2 - 1 + this.hOffset,\n        colorBorderLeft\n      );\n    }\n\n    // floodFill\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis! - 1,\n      this.hSize +\n        Math.floor((this.dimension!.xAxis! - 1) / 2) +\n        this.hOffset -\n        1,\n      this.color!.right!\n    );\n\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis! - 3,\n      this.hSize +\n        Math.floor((this.dimension!.xAxis! - 1) / 2) +\n        this.hOffset -\n        2,\n      this.color!.left!\n    );\n  }\n\n  public static override toString(): string {\n    return \"[Pyramid]\";\n  }\n}\n","import { SlopeColor } from \"../colors\";\nimport { SlopeDimension } from \"../dimensions\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SlopeEast extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = this.dimension!.xAxis! * 2 + this.dimension!.yAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -((this.dimension!.xAxis! * 3) / 2 - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.rightSlope!;\n\n    // Y axis\n    for (let j = 0; j < this.dimension!.yAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        j,\n        this.dimension!.yAxis! / 2 - Math.floor(j / 2) - 1,\n        colorBorderRight\n      );\n\n      this.bitmapData!.setPixel(\n        j + this.dimension!.xAxis! - 2,\n        this.h! - Math.floor(j / 2) - 1,\n        colorBorderRight\n      );\n    }\n\n    // X axis\n    for (let i = 0; i < this.dimension!.xAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        i,\n        this.h! - this.dimension!.xAxis! / 2 + Math.floor(i / 2),\n        colorBorderLeft\n      );\n    }\n\n    // X axis\n    for (\n      let k = this.dimension!.yAxis! / 2 - 1;\n      k < this.h! - this.dimension!.xAxis! / 2;\n      k += 1\n    ) {\n      this.bitmapData!.setPixel(0, k, colorBorderLeft);\n    }\n\n    // Slot\n    for (let m = 0; m < this.dimension!.xAxis! * 2 - 2; m += 1) {\n      this.bitmapData!.setPixel(\n        this.dimension!.yAxis! - 1 + Math.floor(m / 2),\n        m,\n        colorBorderRight\n      );\n\n      this.bitmapData!.setPixel(\n        1 + Math.floor(m / 2),\n        this.dimension!.yAxis! / 2 + m - 1,\n        colorBorderRight\n      );\n    }\n\n    // floodFill\n    this.bitmapData!.floodFill(\n      this.dimension!.yAxis! - 2,\n      1,\n      this.color!.rightSlope!\n    );\n\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis! - 3,\n      this.h! - 3,\n      this.color!.left!\n    );\n\n    // Hack single pixel\n    this.bitmapData!.setPixel(\n      this.dimension!.xAxis! - 2,\n      this.h! - 2,\n      this.color!.left!\n    );\n\n    // Highlight\n    if (this.border) {\n      for (let n = 1; n < this.dimension!.xAxis! * 2 - 3; n += 1) {\n        this.bitmapData!.setPixel(\n          1 + Math.floor(n / 2),\n          this.dimension!.yAxis! / 2 + n - 1,\n          this.color!.borderHighlight!\n        );\n      }\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SlopeEast]\";\n  }\n}\n","import { SlopeDimension, SideXDimension } from \"../dimensions\";\nimport { SlopeColor, SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\nimport { SideX } from \"./SideX\";\n\nimport { PixelObject } from \"../display/PixelObject\";\n\nexport class SlopeNorth extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = (this.dimension!.yAxis! * 3) / 2 + this.dimension!.xAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -(this.dimension!.yAxis! - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n    const colorBorderHighlight = this.border\n      ? this.color!.borderHighlight\n      : this.color!.left;\n\n    const sideX = new SideX(\n      new SideXDimension(\n        this.dimension!.xAxis!,\n        this.h! - this.dimension!.xAxis! / 2\n      ),\n      new SideColor(colorBorderLeft, this.color!.left!)\n    );\n\n    const poX = new PixelObject(sideX);\n\n    const ctx = this.bitmapData!.context!;\n    ctx.drawImage(\n      poX.canvas!,\n      poX.x!,\n      poX.y! + this.h! - this.dimension!.xAxis! / 2\n    );\n\n    const bmd = new BitmapData(this.w!, this.h!);\n\n    // Close the path for floodFill\n    for (\n      let i = this.h! - (this.dimension!.yAxis! * 3) / 2 + 2;\n      i < this.h!;\n      i += 1\n    ) {\n      bmd.setPixel(this.dimension!.xAxis! - 1, i, colorBorderRight);\n    }\n\n    // Y axis\n    for (let j = 1; j < this.dimension!.yAxis!; j += 1) {\n      bmd.setPixel(\n        this.dimension!.xAxis! + j - 2,\n        this.h! - Math.floor(j / 2) - 1,\n        colorBorderRight\n      );\n\n      bmd.setPixel(\n        this.dimension!.xAxis! + j - 2,\n        this.dimension!.xAxis! / 2 - 2 + j,\n        colorBorderRight\n      );\n    }\n\n    // floodFill\n    bmd.floodFill(this.dimension!.xAxis! + 1, this.h! - 3, this.color!.right!);\n\n    // Highlight\n    for (let n = this.dimension!.xAxis! / 2; n < this.h! - 1; n += 1) {\n      bmd.setPixel(this.dimension!.xAxis! - 1, n, this.color!.right!);\n      bmd.setPixel(this.dimension!.xAxis! - 2, n, colorBorderHighlight!);\n    }\n\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\n    ctx.drawImage(bmd.canvas!, 0, 0);\n  }\n\n  public static override toString(): string {\n    return \"[SlopeNorth]\";\n  }\n}\n","import { SlopeDimension } from \"../dimensions\";\nimport { SlopeColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\n\nexport class SlopeSouth extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = this.dimension!.xAxis! / 2 + this.dimension!.yAxis! * 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -((this.dimension!.yAxis! * 3) / 2 - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.bitmapData!.context!.putImageData(this.bitmapData!.imageData!, 0, 0);\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.leftSlope!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n\n    // X axis\n    for (let j = 0; j < this.dimension!.xAxis!; j += 1) {\n      this.bitmapData!.setPixel(\n        j,\n        this.dimension!.yAxis! * 2 + Math.floor(j / 2) - 3,\n        colorBorderLeft\n      );\n\n      this.bitmapData!.setPixel(\n        j + this.dimension!.yAxis! - 2,\n        Math.floor(j / 2),\n        colorBorderLeft\n      );\n    }\n\n    // Y axis\n    for (let i = 0; i < this.dimension!.yAxis!; i += 1) {\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2 + i,\n        this.h! - Math.floor(i / 2) - 1,\n        colorBorderRight\n      );\n    }\n\n    // X axis\n    for (\n      let k = this.dimension!.xAxis! / 2 - 1;\n      k < this.h! - this.dimension!.yAxis! / 2;\n      k += 1\n    ) {\n      this.bitmapData!.setPixel(this.w! - 1, k, colorBorderRight);\n    }\n\n    // Slot\n    for (let m = 0; m < this.dimension!.yAxis! * 2 - 2; m += 1) {\n      this.bitmapData!.setPixel(\n        Math.floor(m / 2),\n        this.dimension!.yAxis! * 2 - m - 3,\n        colorBorderLeft\n      );\n\n      this.bitmapData!.setPixel(\n        this.dimension!.xAxis! - 2 + Math.floor(m / 2),\n        this.h! - m - 1,\n        colorBorderLeft\n      );\n    }\n\n    // floodFill\n    this.bitmapData!.floodFill(\n      this.dimension!.yAxis! - 1,\n      1,\n      this.color!.leftSlope!\n    );\n\n    this.bitmapData!.floodFill(\n      this.dimension!.xAxis!,\n      this.h! - 3,\n      this.color!.right!\n    );\n\n    // Hack single pixel\n    this.bitmapData!.setPixel(\n      this.dimension!.xAxis! - 1,\n      this.h! - 2,\n      this.color!.right!\n    );\n\n    // Highlight\n    if (this.border) {\n      for (let n = 1; n < this.dimension!.yAxis! * 2 - 3; n += 1) {\n        this.bitmapData!.setPixel(\n          this.dimension!.xAxis! - 2 + Math.floor(n / 2),\n          this.h! - n - 1,\n          this.color!.borderHighlight!\n        );\n      }\n    }\n  }\n\n  public static override toString(): string {\n    return \"[SlopeSouth]\";\n  }\n}\n","import { SlopeDimension, SideYDimension } from \"../dimensions\";\nimport { SlopeColor, SideColor } from \"../colors\";\nimport { Matrix } from \"../geom\";\nimport { BitmapData } from \"../display/BitmapData\";\nimport { AbstractPrimitive } from \"./AbstractPrimitive\";\nimport { SideY } from \"./SideY\";\n\nimport { PixelObject } from \"../display/PixelObject\";\n\nexport class SlopeWest extends AbstractPrimitive {\n  constructor(\n    dimension?: SlopeDimension,\n    color?: SlopeColor,\n    border?: boolean,\n    useDefaultCanvas?: boolean\n  ) {\n    super();\n\n    this.useDefaultCanvas = useDefaultCanvas || false;\n    this.border = border || border === undefined;\n    this.dimension = dimension === undefined ? new SlopeDimension() : dimension;\n    this.color = color === undefined ? new SlopeColor() : color;\n\n    this.initRectangle();\n    this.initBitmapData();\n    this.build();\n    this.renderBitmapDataForCanvas();\n  }\n\n  private initRectangle(): void {\n    this.w = this.dimension!.xAxis! + this.dimension!.yAxis!;\n    this.h = (this.dimension!.xAxis! * 3) / 2 + this.dimension!.yAxis! / 2;\n\n    // 22.6 degrees implementation\n    this.w -= 2;\n    this.h -= 3;\n\n    // The matrix offset between the bitmap and the 3d pixel coordinate zero point\n    this.matrix = new Matrix();\n    this.matrix.tx = -(this.dimension!.yAxis! - 2);\n    this.matrix.ty = -(this.dimension!.xAxis! - 2);\n  }\n\n  private initBitmapData(): void {\n    this.bitmapData = new BitmapData(\n      this.w!,\n      this.h!,\n      this.useDefaultCanvas || undefined\n    );\n  }\n\n  private renderBitmapDataForCanvas(): void {\n    this.canvas = this.bitmapData!.canvas;\n  }\n\n  private build(): void {\n    const colorBorderLeft = this.border\n      ? this.color!.border!\n      : this.color!.left!;\n    const colorBorderRight = this.border\n      ? this.color!.border!\n      : this.color!.right!;\n    const colorBorderHighlight = this.border\n      ? this.color!.borderHighlight!\n      : this.color!.left!;\n\n    const sideY = new SideY(\n      new SideYDimension(\n        this.dimension!.yAxis!,\n        this.h! - this.dimension!.yAxis! / 2\n      ),\n      new SideColor(colorBorderRight, this.color!.right!)\n    );\n\n    const poY = new PixelObject(sideY);\n\n    const ctx = this.bitmapData!.context!;\n    ctx.drawImage(\n      poY.canvas!,\n      poY.x! + this.w! - 2,\n      poY.y! + this.h! - this.dimension!.yAxis! / 2\n    );\n\n    const bmd = new BitmapData(this.w!, this.h!);\n\n    // Close the path for floodFill\n    for (\n      let i = this.h! - (this.dimension!.xAxis! * 3) / 2 + 2;\n      i < this.h!;\n      i += 1\n    ) {\n      bmd.setPixel(this.dimension!.xAxis! - 2, i, colorBorderLeft);\n    }\n\n    // X axis\n    for (let j = 0; j < this.dimension!.xAxis! - 1; j += 1) {\n      bmd.setPixel(\n        j,\n        this.dimension!.xAxis! +\n          this.dimension!.yAxis! / 2 -\n          3 +\n          Math.floor(j / 2),\n        colorBorderLeft\n      );\n\n      bmd.setPixel(\n        j,\n        this.dimension!.xAxis! + this.dimension!.yAxis! / 2 - 3 - j,\n        colorBorderLeft\n      );\n    }\n\n    // floodFill\n    bmd.floodFill(this.dimension!.xAxis! - 3, this.h! - 3, this.color!.left!);\n\n    // Highlight\n    for (let n = this.dimension!.yAxis! / 2; n < this.h! - 1; n += 1) {\n      bmd.setPixel(this.dimension!.xAxis! - 2, n, colorBorderHighlight);\n    }\n\n    bmd.context!.putImageData(bmd.imageData!, 0, 0);\n    ctx.drawImage(bmd.canvas!, 0, 0);\n  }\n\n  public static override toString(): string {\n    return \"[SlopeWest]\";\n  }\n}\n","import { Point } from \"../geom\";\nimport { PixelObject } from \"./PixelObject\";\n\nexport class PixelView {\n  public canvas: HTMLCanvasElement | null;\n\n  public context: CanvasRenderingContext2D | null;\n\n  public point: Point | null;\n\n  constructor(canvas?: HTMLCanvasElement, point?: Point) {\n    if (!canvas) {\n      throw new Error(\"Canvas is not defined\");\n    }\n\n    this.canvas = canvas;\n\n    this.context = this.canvas.getContext(\"2d\");\n    if (this.context) {\n      (this.context as any).mozImageSmoothingEnabled = false;\n      (this.context as any).msImageSmoothingEnabled = false;\n      this.context.imageSmoothingEnabled = false;\n    }\n\n    this.point = point || new Point(0, 0);\n  }\n\n  public renderObject(\n    primitive: ConstructorParameters<typeof PixelObject>[0],\n    point3D: ConstructorParameters<typeof PixelObject>[1]\n  ): void {\n    const po = new PixelObject(primitive, point3D);\n\n    if (this.context && this.point && po.canvas) {\n      this.context.drawImage(\n        po.canvas,\n        this.point.x + (po.x || 0),\n        this.point.y + (po.y || 0)\n      );\n    }\n  }\n\n  public clear(): void {\n    if (this.canvas && this.context) {\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n  public static toString(): string {\n    return \"[PixelView]\";\n  }\n}\n","export abstract class CanvasTool {\n  public static getPixel(imageData: ImageData, x: number, y: number): number {\n    const { data } = imageData;\n    const index = (y * imageData.width + x) * 4;\n    const r = data[index]!;\n    const g = data[index + 1]!;\n    const b = data[index + 2]!;\n\n    // eslint-disable-next-line no-bitwise\n    return (r << 16) | (g << 8) | b;\n  }\n\n  public static toString() {\n    return \"[CanvasTool]\";\n  }\n}\n","export abstract class ColorPattern {\n  public GRASS_GREEN: number;\n\n  public YELLOW: number;\n\n  public WINE_RED: number;\n\n  public PINK: number;\n\n  public PURPLE: number;\n\n  public BLUE: number;\n\n  public GRAY: number;\n\n  public BLACK: number;\n\n  public FINE_COLORS: number[];\n\n  protected constructor() {\n    this.GRASS_GREEN = 0xccff00;\n    this.YELLOW = 0xffff00;\n    this.WINE_RED = 0xff0099;\n    this.PINK = 0xff7cbf;\n    this.PURPLE = 0xcc00ff;\n    this.BLUE = 0x00ccff;\n    this.GRAY = 0xeeeeee;\n    this.BLACK = 0x666666;\n\n    this.FINE_COLORS = [\n      this.GRASS_GREEN,\n      this.YELLOW,\n      this.WINE_RED,\n      this.PINK,\n      this.PURPLE,\n      this.BLUE,\n      this.GRAY,\n      this.BLACK,\n    ];\n  }\n\n  public getRandomComfortableColor(): number {\n    return this.FINE_COLORS[\n      Math.floor(Math.random() * this.FINE_COLORS.length)\n    ]!;\n  }\n\n  public static toString(): string {\n    return \"[ColorPattern]\";\n  }\n}\n"],"names":["AbstractColor","_a","_b","_c","inner","_d","left","_e","right","_f","border","_g","borderHighlight","_h","horizontal","_j","leftSlope","_k","rightSlope","this","toString","ColorGeom","get32","color","applyBrightness","brightness","highlight","r","g","b","y","a","u","v","Math","pow","max","min","CubeColor","_super","_this","brightnessGain","undefined","__extends","prototype","getByHorizontalColor","LineColor","call","PyramidColor","getByRightColor","SideColor","getByInnerColor","SlopeColor","AbstractDimension","xAxis","yAxis","zAxis","tall","BrickDimension","Error","CubeDimension","LineXDimension","LineYDimension","LineZDimension","PyramidDimension","axis","SideXDimension","SideYDimension","SlopeDimension","AbstractPrimitive","canvas","w","h","dimension","bitmapData","useDefaultCanvas","_l","matrix","Matrix","c","d","tx","ty","Point","x","concat","Point3D","z","toGlobalCoordinates","offset","p2D","floor","CanvasManager","getDefaultCanvas","defaultCanvas","document","createElement","getNewCanvas","BitmapData","imageData","context","setAttribute","getContext","clearRect","width","height","mozImageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingEnabled","createImageData","setPixel","posX","posY","index","setPixelByIndex","pixels","data","checkPixelAvailable","floodFill","col","row","matchFlag","i","j","stack","nowCol","prevCol","push","length","Brick","initRectangle","initBitmapData","build","renderBitmapDataForCanvas","putImageData","xOffsetInner","xOffsetOut","yOffsetOut","borderColor","PixelObject","primitive","point3D","p3D","SideX","yOffsetInner","SideY","Cube","offsetX","offsetY","brick","sideX","sideY","poBrick","poX","poY","ctx","drawImage","bmd","k","LineX","LineY","xOffsetBorder","LineZ","Pyramid","hSize","hOffset","colorBorderLeft","colorBorderRight","colorBorderHighlight","l","m","SlopeEast","n","SlopeNorth","SlopeSouth","SlopeWest","PixelView","point","renderObject","po","clear","CanvasTool","getPixel","ColorPattern","GRASS_GREEN","YELLOW","WINE_RED","PINK","PURPLE","BLUE","GRAY","BLACK","FINE_COLORS","getRandomComfortableColor","random"],"mappings":"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"}